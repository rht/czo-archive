[
    {
        "content": "<p>I see there are some new changes in the view all stream panel. It's nice to have a filter to sort the streams. Although, can we manage the spacing here a bit? Looks a tad bit strange to me personally.<br>\n<a href=\"/user_uploads/2/cd/csN7gfD1ahFhUo-JMlo6eSSa/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/cd/csN7gfD1ahFhUo-JMlo6eSSa/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/cd/csN7gfD1ahFhUo-JMlo6eSSa/image.png\"></a></div>",
        "id": 858285,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587400345
    },
    {
        "content": "<p>Or maybe float it to either left or right?</p>",
        "id": 858286,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587400373
    },
    {
        "content": "<p>I'm also happy about this change!  The person that contributed is busy with non-Zulip stuff for the short term, so we'll need somebody else to run with the next iteration.  I agree that we could tweak the position/spacing of those buttons for starters.  We also eventually want to support reverse sorts, which shouldn't be terribly difficult to implement.</p>",
        "id": 858287,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587400450
    },
    {
        "content": "<p>Can I pick this up for the time being if the original contributor is alright with it? At least the visual changes since they seem necessary right now.</p>",
        "id": 858288,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587400603
    },
    {
        "content": "<p>Also, there is a white divider b/w <code>Filter stream</code> input and stream list...it doesn't look good and make any sense there</p>",
        "id": 858292,
        "sender_full_name": "Siddharth",
        "timestamp": 1587400683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"13307\">Vaibhav Raj Singh</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/858288\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/858288\">said</a>:</p>\n<blockquote>\n<p>Can I pick this up for the time being if the original contributor is alright with it? At least the visual changes since they seem necessary right now.</p>\n</blockquote>\n<p>Yep!</p>",
        "id": 858310,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587401283
    },
    {
        "content": "<p>Yeah, I think that white divider is probably a row too low?</p>",
        "id": 858311,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1587401318
    },
    {
        "content": "<p>Oh, not, it seems like it's in the right place, just in a color that's probably inherited from the day theme.</p>",
        "id": 858313,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1587401349
    },
    {
        "content": "<p>The commit <a href=\"https://github.com/zulip/zulip/commit/ac7ec426b0482deb61b93558e0f33539b79bb972\" title=\"https://github.com/zulip/zulip/commit/ac7ec426b0482deb61b93558e0f33539b79bb972\">https://github.com/zulip/zulip/commit/ac7ec426b0482deb61b93558e0f33539b79bb972</a> was contributed by <span class=\"user-mention silent\" data-user-id=\"14879\">Roland Crosby</span> , and we've already reached out, so you're good, <span class=\"user-mention\" data-user-id=\"13307\">@Vaibhav Raj Singh</span></p>",
        "id": 858314,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587401389
    },
    {
        "content": "<p><a href=\"/user_uploads/2/9d/Sr4-kY8XNRg0YO27s4jgj7wG/Screenshot-from-2020-04-21-00-35-35.png\" title=\"Screenshot-from-2020-04-21-00-35-35.png\">Screenshot-from-2020-04-21-00-35-35.png</a> <br>\nJust a simple right align will be alright?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/9d/Sr4-kY8XNRg0YO27s4jgj7wG/Screenshot-from-2020-04-21-00-35-35.png\" title=\"Screenshot-from-2020-04-21-00-35-35.png\"><img src=\"/user_uploads/2/9d/Sr4-kY8XNRg0YO27s4jgj7wG/Screenshot-from-2020-04-21-00-35-35.png\"></a></div>",
        "id": 858538,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587410613
    },
    {
        "content": "<p>That seems reasonable to me.  I'd make sure to test it out on a wide screen just to get the feel for it.</p>",
        "id": 858542,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587410864
    },
    {
        "content": "<p>Also that divider. Should I change its color for dark mode?</p>",
        "id": 858550,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587411253
    },
    {
        "content": "<p>can the create stream <code>+</code> button have the same outline and color box as its neighbours <br>\nright now hovering on it dull the color</p>",
        "id": 858556,
        "sender_full_name": "Siddharth",
        "timestamp": 1587411396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"11296\">@Siddharth</span>  You mean something of this sort?<br>\n<a href=\"user_uploads/2/1d/GCoyvbAEH2Ns_nZz8d6HiwDG/sample-button.png\" title=\"user_uploads/2/1d/GCoyvbAEH2Ns_nZz8d6HiwDG/sample-button.png\">sample-button.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/2/1d/GCoyvbAEH2Ns_nZz8d6HiwDG/sample-button.png\" title=\"sample-button.png\"><img src=\"user_uploads/2/1d/GCoyvbAEH2Ns_nZz8d6HiwDG/sample-button.png\"></a></div>",
        "id": 858562,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587411744
    },
    {
        "content": "<p>yeah exactly<br>\nit fits with the design of other buttons</p>",
        "id": 858564,
        "sender_full_name": "Siddharth",
        "timestamp": 1587411794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> I made <a href=\"https://github.com/zulip/zulip/pull/14670\" title=\"https://github.com/zulip/zulip/pull/14670\">#14670</a> for this. Added a small conditional since the CSS for this is limited to just this small div. However, the tests are failing due to loss in code coverage. Should I add a test for such a minor change?</p>",
        "id": 858663,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587418755
    },
    {
        "content": "<p>We should add the test coverage there, although the need for tests here is making me wonder about this code (which is one of the functions of having tests).</p>",
        "id": 858687,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587420125
    },
    {
        "content": "<p>It seems like the switcher class should generally generate very vanilla HTML, and the <code>align</code> option feels like it's kind of overly specific.</p>",
        "id": 858689,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587420255
    },
    {
        "content": "<p>Maybe we just allow every toggle component (so far, we only four) to pass in something like <code>opts.html_class</code>?  And then that class can be styled however we want in CSS?  Or we could just put it inside a container that gets aligned--that's another option.</p>",
        "id": 858691,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587420432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"13307\">@Vaibhav Raj Singh</span> I assume these are the lines missing coverage?</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">opts</span><span class=\"p\">.</span><span class=\"nx\">align</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// add a check inside passed arguments in case some extra</span>\n            <span class=\"c1\">// classes need to be added for correct alignment or other purposes</span>\n            <span class=\"nx\">_component</span><span class=\"p\">.</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;align-tab&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 858692,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587420524
    },
    {
        "content": "<p>Yeah, I like the idea of supporting a generic HTML class here.</p>",
        "id": 858727,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1587422289
    },
    {
        "content": "<p>Let's go with <code>opts.html_class</code> then, and I think it's fine if it's optional, since we haven't needed it for the other togglers.  We should keep 100% coverage here--I think it should be mostly straightforward to test this in a nice way, and <span class=\"user-mention\" data-user-id=\"1406\">@Rohitt Vashishtha</span> and I are good resources on the node tests.</p>",
        "id": 858740,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587422949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/858692\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/858692\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"13307\">Vaibhav Raj Singh</span> I assume these are the lines missing coverage?</p>\n</blockquote>\n<p>Yea these are the ones. Re: <code>opts.html_class</code> any extra classes to be added can be then added through this, right? I'll make the changes then.</p>",
        "id": 858745,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587423093
    },
    {
        "content": "<p>I can't see any reason why you'd ever need more than one class, the way that we generally organize our CSS.</p>",
        "id": 858776,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587423873
    },
    {
        "content": "<p>Like, here, I'd call the class something like <code>stream_sorter_toggle</code>, and then just have the CSS use that class to specify the alignment stuff.</p>",
        "id": 858777,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587423908
    },
    {
        "content": "<p>Updated the PR for <code>html_class</code>( <a href=\"https://github.com/zulip/zulip/pull/14670\" title=\"https://github.com/zulip/zulip/pull/14670\">#14670</a>). Will work on adding required tests now.</p>",
        "id": 858800,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587426816
    },
    {
        "content": "<p>For the tests, should I begin with adding another case in here? -</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">sel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;tab-switcher&#39;&gt;&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">switcher</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;keyboard-shortcuts&#39; data-tab-id=&#39;0&#39; tabindex=&#39;0&#39;&gt;translated: Keyboard shortcuts&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;message-formatting&#39; data-tab-id=&#39;1&#39; tabindex=&#39;0&#39;&gt;translated: Message formatting&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;search-operators&#39; data-tab-id=&#39;2&#39; tabindex=&#39;0&#39;&gt;translated: Search operators&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;unknown selector: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">sel</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 858808,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587427083
    },
    {
        "content": "<p>Yeah, I think you can just modify the first <code>case</code> there as well as the call to <code>components.toggle</code> in that test.</p>",
        "id": 858868,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I wonder if we should just make this code build its HTML with a template.  Here's the original commit for the toggle component: <a href=\"https://github.com/zulip/zulip/commit/75db0367333261704f4615b7bee8fcc03979996c\" title=\"https://github.com/zulip/zulip/commit/75db0367333261704f4615b7bee8fcc03979996c\">75db0367333261704f4615b7bee8fcc03979996c</a></p>",
        "id": 858871,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429414
    },
    {
        "content": "<p>I'm generally a fan of using templates rather than HTML generated with JS for everything.</p>",
        "id": 858872,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1587429468
    },
    {
        "content": "<p>The code has not evolved a ton since the original commit:</p>\n<div class=\"codehilite\"><pre><span></span><code> 14     const component = (function render_component(opts) {\n 15         const _component = $(&quot;&lt;div class=&#39;tab-switcher&#39;&gt;&lt;/div&gt;&quot;);\n 16         opts.values.forEach(function (value, i) {\n 17             // create a tab with a tab-id so they don&#39;t have to be referenced\n 18             // by text value which can be inconsistent.\n 19             const tab = $(&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;&quot; + value.key + &quot;&#39; data-tab-id=&#39;&quot; + i + &quot;&#39; tabindex=&#39;0&#39;&gt;&quot; + value.la    bel + &quot;&lt;/div&gt;&quot;);\n 20\n 21             // add proper classes for styling in CSS.\n 22             if (i === 0) {\n 23                 // this should be default selected unless otherwise specified.\n 24                 tab.addClass(&quot;first selected&quot;);\n 25             } else if (i === opts.values.length - 1) {\n 26                 tab.addClass(&quot;last&quot;);\n 27             } else {\n 28                 tab.addClass(&quot;middle&quot;);\n 29             }\n 30             _component.append(tab);\n 31         });\n 32         return _component;\n 33     }(opts));\n</code></pre></div>",
        "id": 858873,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429473
    },
    {
        "content": "<p>So yeah, I'd be in favor of doing that here.</p>",
        "id": 858874,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1587429475
    },
    {
        "content": "<p>If this were actually using the power of JS in some meaningful way, that would be nice, but it's really not doing anything special here.</p>",
        "id": 858875,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> if you are working on it now, I'd be happy to help review/test this.</p>\n<p>Otherwise I could take a quick stab at this (and related testing) in a few hours.</p>",
        "id": 858876,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1587429791
    },
    {
        "content": "<p>I'm not really working on it.</p>",
        "id": 858877,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429806
    },
    {
        "content": "<p>I don't think it's urgent to convert this to a template, was just kinda wondering.</p>",
        "id": 858878,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587429946
    },
    {
        "content": "<p>Somewhat related--it would be nice to get keyboard support (i.e. tabs and arrows) working for these widgets:</p>\n<p><a href=\"/user_uploads/2/20/LMlVgXmr_FHSX-eXl9r9yOTl/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/20/LMlVgXmr_FHSX-eXl9r9yOTl/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/20/LMlVgXmr_FHSX-eXl9r9yOTl/image.png\"></a></div>",
        "id": 858879,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587430137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/858868\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/858868\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think you can just modify the first <code>case</code> there as well as the call to <code>components.toggle</code> in that test.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span>  Should I add those tests or are we taking the templates approach for it?</p>",
        "id": 859482,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587498882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"13307\">@Vaibhav Raj Singh</span> Just modify the tests for now.  Hopefully the tests are just like a three-line change.</p>",
        "id": 859507,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587500323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"13307\">Vaibhav Raj Singh</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/858808\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/858808\">said</a>:</p>\n<blockquote>\n<p>For the tests, should I begin with adding another case in here? -</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">sel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;tab-switcher&#39;&gt;&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">switcher</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;keyboard-shortcuts&#39; data-tab-id=&#39;0&#39; tabindex=&#39;0&#39;&gt;translated: Keyboard shortcuts&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;message-formatting&#39; data-tab-id=&#39;1&#39; tabindex=&#39;0&#39;&gt;translated: Message formatting&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;ind-tab&#39; data-tab-key=&#39;search-operators&#39; data-tab-id=&#39;2&#39; tabindex=&#39;0&#39;&gt;translated: Search operators&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">make_tab</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;unknown selector: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">sel</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>The tests here (and in most parts of file) are meant entirely for the <code>keyboard-shortcuts</code>, <code>message-formatting</code> and <code>search-operators</code>. All of these don't have the criteria for additional class through <code>html_class</code>. How should I test the presence of  the additional <code>html_class</code>?</p>",
        "id": 859664,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587505607
    },
    {
        "content": "<p>I have to add coverage for this specific line:</p>\n<div class=\"codehilite\"><pre><span></span><code>_component.addClass(opts.html_class);\n</code></pre></div>",
        "id": 859666,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587505730
    },
    {
        "content": "<p>It’s fine to just add a class in the test.</p>",
        "id": 859668,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587506237
    },
    {
        "content": "<p>The test is just to make sure the component works in a generic sense.</p>",
        "id": 859669,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587506288
    },
    {
        "content": "<p>I'm getting a strange error:</p>\n<div class=\"codehilite\"><pre><span></span><code>TypeError: _component.addClass is not a function\n</code></pre></div>\n\n\n<p><code>_component </code>is defined as an element just before this <code>const _component = $(\"&lt;div class='tab-switcher'&gt;&lt;/div&gt;\");</code>.  It's a function and is working since the class is being added as seen in frontend.</p>",
        "id": 859695,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587507559
    },
    {
        "content": "<p>I think you need to add an <code>addClass</code> to the <code>switcher</code> stub.</p>",
        "id": 859697,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587507657
    },
    {
        "content": "<p>Here's the \"real\" code:</p>\n<div class=\"codehilite\"><pre><span></span><code>        const _component = $(&quot;&lt;div class=&#39;tab-switcher&#39;&gt;&lt;/div&gt;&quot;);\n        if (opts.html_class) {\n            // add a check inside passed arguments in case some extra\n            // classes need to be added for correct alignment or other purposes\n            _component.addClass(opts.html_class);\n        }\n</code></pre></div>",
        "id": 859701,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587507840
    },
    {
        "content": "<p>And when you run the tests, note what <code>_component</code> becomes due to the <code>$</code> stub here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">104</span>     <span class=\"nx\">set_global</span><span class=\"p\">(</span><span class=\"s1\">&#39;$&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">[...]</span>\n<span class=\"mi\">110</span>         <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">sel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">111</span>         <span class=\"k\">case</span> <span class=\"s2\">&quot;&lt;div class=&#39;tab-switcher&#39;&gt;&lt;/div&gt;&quot;</span><span class=\"o\">:</span>\n<span class=\"mi\">112</span>             <span class=\"k\">return</span> <span class=\"nx\">switcher</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 859702,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587507899
    },
    {
        "content": "<p>So you want something like this inside the code that builds <code>switcher</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">addClass</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">class_added</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some_class&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 859703,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587507990
    },
    {
        "content": "<p>And after you build the widget, make sure the class was actually added with <code>assert(class_added)</code>.</p>",
        "id": 859705,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/859702\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/859702\">said</a>:</p>\n<blockquote>\n<p>And when you run the tests, note what <code>_component</code> becomes due to the <code>$</code> stub here:</p>\n</blockquote>\n<p>I didn't realise this point. Will add <code>.addClass</code> to switcher .</p>",
        "id": 859706,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587508144
    },
    {
        "content": "<p>How about </p>\n<div class=\"codehilite\"><pre><span></span><code>self.addClass = function (c) {\n            self.class += &#39; &#39; + c;\n        }\n</code></pre></div>\n\n\n<p>Since the class is being added explicitly here, would an extra check be still required? (Ran the tests and code coverage is recovered now)</p>",
        "id": 859707,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587508532
    },
    {
        "content": "<p>We want to verify that the class is actually added properly; otherwise, it's kind of a weak test.</p>",
        "id": 859708,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508753
    },
    {
        "content": "<p>For example, if the test still passes if you remove <code>self.class += ' ' + c</code>, then that line of code is kind of pointless, right?</p>",
        "id": 859709,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508784
    },
    {
        "content": "<p>I do think my original proposal was clumsy, though.</p>",
        "id": 859711,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508805
    },
    {
        "content": "<p>Consider modelling that with <code>classList</code> instead of <code>class</code>.</p>",
        "id": 859712,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1587508854
    },
    {
        "content": "<p>Maybe...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">addClass</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">added_class</span><span class=\"o\">=</span> <span class=\"nx\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// build widget with class=&#39;whatever&#39;</span>\n\n<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"nx\">switcher</span><span class=\"p\">.</span><span class=\"nx\">added_class</span><span class=\"p\">,</span> <span class=\"s1\">&#39;whatever&#39;</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 859713,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/101-design/topic/stream.20filter/near/859712\" title=\"#narrow/stream/101-design/topic/stream.20filter/near/859712\">said</a>:</p>\n<blockquote>\n<p>Consider modelling that with <code>classList</code> instead of <code>class</code>.</p>\n</blockquote>\n<p>yeah, <code>self.classList.push(class)</code></p>",
        "id": 859714,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587508929
    },
    {
        "content": "<p><code>self.classList.push(c)</code> gives this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>TypeError: Cannot read property &#39;push&#39; of undefined\n</code></pre></div>",
        "id": 859718,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587509149
    },
    {
        "content": "<p>I guess it should be <code>classList.add</code> instead of push.</p>",
        "id": 859720,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587509211
    },
    {
        "content": "<p>Yeah it acts more like a <code>Set</code> than an <code>Array</code>. But right now the mocked version doesn’t exist at all.</p>",
        "id": 859722,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1587509369
    },
    {
        "content": "<p><code>self.classList</code> seems to be undefined inside the stub.</p>",
        "id": 859723,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587509385
    },
    {
        "content": "<p>There’s maybe a larger conversation to be had about whether we should be using real jQuery and JSDOM for more of these mocking tasks (but we don’t need to have it now).</p>",
        "id": 859724,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1587509539
    },
    {
        "content": "<p>I think you just need to say <code>self.classList = []</code> in the stub.</p>",
        "id": 859725,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587509589
    },
    {
        "content": "<p><code>new Set()</code>.</p>",
        "id": 859726,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1587509680
    },
    {
        "content": "<p>Updated <a href=\"https://github.com/zulip/zulip/pull/14670\" title=\"https://github.com/zulip/zulip/pull/14670\">#14670</a> . Thanks for the help!</p>",
        "id": 859735,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587510178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"13307\">@Vaibhav Raj Singh</span> I don't think this is quite the idea:</p>\n<div class=\"codehilite\"><pre><span></span><code>        self.addClass = function (c) {\n            self.classList = new Set();\n            self.classList.add(c);\n            self.addedClass = c;\n        }\n</code></pre></div>",
        "id": 859753,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587510830
    },
    {
        "content": "<p>The idea behind using a <code>Set</code> is to validate that the set of classes that your code adds matches the set of classes that you expect.</p>",
        "id": 859754,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587510871
    },
    {
        "content": "<p>So you'd want to initialize the set outside of <code>addClass</code>, and probably call it <code>classSet</code> or <code>classes</code>.</p>",
        "id": 859756,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587510897
    },
    {
        "content": "<p><code>classList</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" title=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\">real thing</a>.</p>",
        "id": 859761,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1587511197
    },
    {
        "content": "<p>As in I need to just  initialize <code>self.classList = new Set()</code> in the stub, outside <code>self.addClass</code>?</p>",
        "id": 859762,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587511202
    },
    {
        "content": "<p>yep</p>",
        "id": 859774,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587511899
    },
    {
        "content": "<p><a href=\"https://github.com/zulip/zulip/pull/14670\" title=\"https://github.com/zulip/zulip/pull/14670\">#14670</a> is ready for a review.</p>",
        "id": 859794,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587513442
    },
    {
        "content": "<p>If we're gonna have <code>classList</code>, we should assert that it's being populated correctly, and then we won't need <code>addedClass</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">addClass</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span>\n            <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">addedClass</span> <span class=\"o\">=</span> <span class=\"nx\">c</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n</code></pre></div>",
        "id": 859820,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587514449
    },
    {
        "content": "<p>It might help to step back and think about the big picture.</p>",
        "id": 859821,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587514504
    },
    {
        "content": "<p>You've added code to the widget such that when it creates the main component, it will add a class to the list of classes for that component, via jQuery.</p>",
        "id": 859823,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587514532
    },
    {
        "content": "<p>So you want the test to basically assert that <code>switcher.classList</code> really is equal to a set containing the element <code>'stream_sorter_toggle'</code>.</p>",
        "id": 859829,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587514618
    },
    {
        "content": "<p>And then you can kind of work back from that assertion to figure out the stubbing.</p>",
        "id": 859831,
        "sender_full_name": "Steve Howell",
        "timestamp": 1587514632
    },
    {
        "content": "<p>Will remember this nice approach <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 859867,
        "sender_full_name": "Vaibhav Raj Singh",
        "timestamp": 1587517219
    }
]