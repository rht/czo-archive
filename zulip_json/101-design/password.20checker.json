[
    {
        "content": "<p>This is in reference to <a href=\"https://github.com/zulip/zulip/pull/5614\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/5614\">#5614</a>. There are three pieces of information we can get out of zxcvbn: the crack time, a one sentence warning, and a several sentences suggestion. Screenshot from <span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span>:<br>\n<a href=\"/user_uploads/2/b/ee9vJhmUECQ-e0k-j4_F0MQg/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<p>What should we show to the user?<br>\nI'm tempted to show something like </p>\n<div class=\"codehilite\"><pre><span></span>Crack time: &lt;crack time&gt;. Try adding an uncommon word or two.\n</pre></div>\n\n\n<p>in red, and not attempting to give the zxcvbn explanations.</p>\n<p>The main case to think about here is a user that has a favorite password (like d0nth4acKm3) that has passed every password checker so far, but fails zxcvbn. We saw a few cases of this at pycon, and the current experience is pretty bad; it feels to them that our password checker is broken. Vishnu then put in the current warnings, but zxcvbn only has warnings for a small fraction of weak passwords, so it didn't help as much as we had hoped. The suggestions cover the full range of weak passwords, but at some point I think they become pretty generic (like \"Add another word or two. Uncommon words are better\"), and no one has given them a pass for being great strings (I don't know of any product that uses zxcvbn as we do; even dropbox allows passwords like \"aaaaaa\"). So my proposal above is to give a short, fixed piece of advice, along with a bit more concrete information (crack time) than just the colored bar.</p>\n<p>Thoughts? Thanks for working on this Yashashvi!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/b/ee9vJhmUECQ-e0k-j4_F0MQg/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/2/b/ee9vJhmUECQ-e0k-j4_F0MQg/pasted_image.png\"></a></div>",
        "id": 282816,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505529352
    },
    {
        "content": "<p>I'm in favor of just giving general password advice.</p>",
        "id": 282817,
        "sender_full_name": "Steve Howell",
        "timestamp": 1505529626
    },
    {
        "content": "<blockquote>\n<p>I don't know of any product that uses zxcvbn as we do; even dropbox allows passwords like \"aaaaaa\"</p>\n</blockquote>\n<p>My default reaction to this is that if we don't think anyone else is using it, we shouldn't either. This doesn't seem like the right area for us to attempt to be trailblazers in.</p>",
        "id": 282837,
        "sender_full_name": "Greg Price",
        "timestamp": 1505532364
    },
    {
        "content": "<p>Whatever Google and Dropbox and Facebook and whoever are doing for their password requirements, I think we'll be best off if we copy as accurately as we can. Users will come with expectations about how passwords work, and trying to be different will be an education challenge and frustrating for many users.</p>",
        "id": 282838,
        "sender_full_name": "Greg Price",
        "timestamp": 1505532446
    },
    {
        "content": "<p>Changing those expectations is hard work for those products too, but they have teams of full-time security experts with time to devote to trying. What they can accomplish, we should <a href=\"https://en.wikipedia.org/wiki/Drafting_(aerodynamics)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Drafting_(aerodynamics)\">draft on</a> them for, but what they can't or haven't I don't think it'll generally make sense for us to try.</p>",
        "id": 282839,
        "sender_full_name": "Greg Price",
        "timestamp": 1505532618
    },
    {
        "content": "<p>Yeah, just tested changing my Dropbox password, and it did indeed accept \"aaaaaa\". There was a tiny little strength meter at the right-hand end of the new-password field; but I didn't even see that the first time. (I did when I looked harder, while changing my password to a new decent random string. <img alt=\":stuck_out_tongue:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f61b.png\" title=\"stuck out tongue\"> )</p>",
        "id": 282841,
        "sender_full_name": "Greg Price",
        "timestamp": 1505533881
    },
    {
        "content": "<p>So I think they use zxcvbn in the sense that it powers that tiny strength meter -- but they don't let it get in users' way, at all.</p>",
        "id": 282842,
        "sender_full_name": "Greg Price",
        "timestamp": 1505533912
    },
    {
        "content": "<p>In more encouraging news for zxcvbn, WordPress apparently uses it, for real, since the 3.7 release a few years ago:<br>\n<a href=\"https://wpengine.com/support/strong-passwords/\" target=\"_blank\" title=\"https://wpengine.com/support/strong-passwords/\">https://wpengine.com/support/strong-passwords/</a><br>\nThough they do it in a limited compromise -- it's only enforced for more-privileged users, including authors (but not commenters, I guess.)</p>",
        "id": 282843,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534167
    },
    {
        "content": "<p>And Atlassian products apparently also now include it, with (it sounds like) the option for admins to set a strength requirement. Here's some user reactions:<br>\n<a href=\"https://community.atlassian.com/t5/Jira-questions/What-are-the-requirements-for-a-Very-Strong-password-under-the/qaq-p/93856\" target=\"_blank\" title=\"https://community.atlassian.com/t5/Jira-questions/What-are-the-requirements-for-a-Very-Strong-password-under-the/qaq-p/93856\">https://community.atlassian.com/t5/Jira-questions/What-are-the-requirements-for-a-Very-Strong-password-under-the/qaq-p/93856</a><br>\n<a href=\"https://jira.atlassian.com/browse/ID-210\" target=\"_blank\" title=\"https://jira.atlassian.com/browse/ID-210\">https://jira.atlassian.com/browse/ID-210</a></p>\n<blockquote>\n<p>We can set a strength of Very Strong, but there is no indication either in the interface or the documentation as to what will satisfy this level. We have tried to use it but have had to give up as our staff are failing to create passwords that will meet it and we cannot tell them what will.</p>\n</blockquote>\n<p>--</p>\n<blockquote>\n<p>I don't have a solution, but this week we delivered some training for some users of Confluence Cloud who didn't have a background in information technology. Quite a few of them couldn't get past the password creation stage. The password policy was set to Good, so we lowered it to Weak. Even then some ran into problems.</p>\n</blockquote>",
        "id": 282844,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534243
    },
    {
        "content": "<p>those quotes match my experience onboarding people at pycon :).</p>",
        "id": 282846,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505534325
    },
    {
        "content": "<p>I think the Dropbox approach is probably best, then. :)</p>",
        "id": 282848,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534357
    },
    {
        "content": "<p>Worth taking a look at how they present it, too: <a href=\"https://www.dropbox.com/register\" target=\"_blank\" title=\"https://www.dropbox.com/register\">https://www.dropbox.com/register</a> (in an incognito window if necessary)</p>\n<p>Dropbox is generally pretty good at making the product look nice and be easy for people to figure out how to use, so a good model to consult in general.</p>",
        "id": 282849,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534420
    },
    {
        "content": "<p>Optionally we could add in the Atlassian thing of having an organization (and/or server) option to set a minimum strength. With maybe some warning text that the admin should expect to have to educate some users on how to make a strong password -- in fact it may only be a good idea in environments where everyone's expected to be using a password manager, so they can make a random password.</p>",
        "id": 282850,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534506
    },
    {
        "content": "<p>I generally agree with Greg that this is not an area for us to be innovative in at the moment. <br>\nOne point though is that Dropbox et al also have tons of support staff on hand to deal with people whose accounts are getting hacked, whereas most zulip installation admins probably don't.</p>",
        "id": 282851,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505534527
    },
    {
        "content": "<p>another idea could be to have a  \"suggest a password\" button, that gives them 10 random characters or whatever.</p>",
        "id": 282853,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505534671
    },
    {
        "content": "<p>Maybe. Does anyone else do that? I'd worry about e.g. setting users' expectations to get their passwords from a service on the web.</p>",
        "id": 282854,
        "sender_full_name": "Greg Price",
        "timestamp": 1505534710
    },
    {
        "content": "<p>I don't know anyone else that does it, and I agree it's maybe a bit bad for the ecosystem. <br>\nBut I do think our situation is not totally comparable to a company that has had tons of time to build tools for dealing with hacked accounts.</p>",
        "id": 282858,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505534909
    },
    {
        "content": "<p>I think we just need slightly better messaging for passwords that don't meet the bar here.</p>",
        "id": 282860,
        "sender_full_name": "Steve Howell",
        "timestamp": 1505535195
    },
    {
        "content": "<p>I don't have much knowledge that I can give any suggestions. But I observe one thing, that sometimes crack time of password is centuries, but password is not accepted. So maybe if we can change quality check method. </p>\n<p>And I have also observed that password like \"z!X4@S_&amp;\", \"d0nth4acKm3\" has crack time \"centuries\", but are not accepted.</p>\n<p>And one more thing, that zxcvbn provides four type of crack time: online_throttling_100_per_hour, online_no_throttling_10_per_second, offline_slow_hashing_1e4_per_second, offline_fast_hashing_1e10_per_second.</p>\n<p>I have included the \"online_throttling_100_per_hour\" in this. But in quality formula \"offline_slow_hashing_1e4_per_second\" is used.<br>\nI don't have any idea about how this four differ, but if you guys want to change formula or something then I can study this thing, and find some appropriate formula for quality by using more than one(important) crack time. </p>\n<p>I am just guessing, and sorry if I misinterpret the problem, as I am very new to this project.</p>",
        "id": 282889,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1505547384
    },
    {
        "content": "<p>One thing to keep in mind is that the experience at something like PyCon is actually a bad choice to base our thinking on for password strength, because typing a password quickly on someone else's computer, you're almost certainly not going to use something secure, even if you generally use secure passwords.</p>",
        "id": 282905,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1505551484
    },
    {
        "content": "<p>We already have a server-level option to control the required strength, as another sidenote.</p>",
        "id": 282906,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1505551663
    },
    {
        "content": "<p>I think ultimately our main strategy on this front should be to encourage people to use an Oauth provider like Google auth, since then someone else is dealing with the passwords entirely.  From a messaging perspective, I think we're currently not doing a great job; I think it could be a good idea to have a longer-form page or popup explaining how this works for folks who are getting a \"too weak\" password error where we can't provide details.  I think it should be pretty easy in a few sentences to convey that the password that they're using has been proven to be easily guessed.  </p>\n<p>\\I don't think allowing passwords like 'aaaaaa' is a good idea, so we should have some requirement.  Wordpress seems like actually a reasonable guide to follow: users who have real accounts need a real password.  We should look at what parameters they use.</p>",
        "id": 282907,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1505551979
    },
    {
        "content": "<p>Making a new account showed me how strict our password checker is, passwords like<code>word1word2word3123</code> wouldn't get accepted.</p>",
        "id": 283298,
        "sender_full_name": "Sampriti Panda",
        "timestamp": 1505601714
    },
    {
        "content": "<p>Yeah, just so you know how it works, basically it uses an algorithm to estimate how many guesses it would take a cracking algorithm to guess your password.  And that password fits within a pattern that one could guess with not a ton of tries.</p>",
        "id": 283303,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1505601945
    },
    {
        "content": "<p>(As a quick reply to <span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span>, we want <code>offline_slow_hashing_1e4_per_second</code>. That'll reduce the \"centuries\" into a smaller time scale :).)</p>",
        "id": 283304,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505602254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span> I have update PR <a href=\"https://github.com/zulip/zulip/pull/6513\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6513\">#6513</a> with all required changes.</p>",
        "id": 283458,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1505638097
    },
    {
        "content": "<p>Thanks Yashashvi!<br>\nAt risk of being even more innovative, how about the following compromise?</p>\n<ul>\n<li>We let the user register with whatever they want (e.g. <code>aaaaaa</code>, or maybe slightly higher bar), with the warning that their password is too weak, and hence will expire after two weeks</li>\n<li>After two weeks we make them change their password if it is still too weak</li>\n<li>Realm setting to turn this \"feature\" off</li>\n</ul>\n<p>That will make registering easy, and setting up a new realm easy, while only moderately compromising security.</p>\n<p>The pycon experience was developers setting their laptops up for the sprint. They might have started with a weak password they didn't care about, but by the time they were calling me over I imagine they were trying things closer to <code>word1word2word3123</code> and <code>z!X4@S_&amp;</code>.</p>",
        "id": 283644,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505671712
    },
    {
        "content": "<p>Also possibly our default setting is way too pessimistic, and we should just protect against online attacks by default (with a realm setting to increase it to the current level of protection).</p>",
        "id": 283652,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505672056
    },
    {
        "content": "<blockquote>\n<p>The pycon experience was developers setting their laptops up for the sprint.</p>\n</blockquote>\n<p>That sounds pretty representative, then -- if anything these are more sophisticated users than most people, more likely to be using a password manager and more likely to have some idea of what makes a secure password.</p>",
        "id": 284044,
        "sender_full_name": "Greg Price",
        "timestamp": 1505782696
    },
    {
        "content": "<p>I agree it'd be interesting to see what parameters WordPress uses. I actually don't have a clear idea of what parameters we use -- it's \"0.5\" but I don't know what that means.</p>",
        "id": 284045,
        "sender_full_name": "Greg Price",
        "timestamp": 1505782776
    },
    {
        "content": "<p>OK, reading our developer docs, it means it'd take an estimated exp(0.5 * 22) sec to crack at 10^4/s, which comes to 17 hours.</p>",
        "id": 284046,
        "sender_full_name": "Greg Price",
        "timestamp": 1505782848
    },
    {
        "content": "<p>I think if we're going to enforce a bar that many users will run into and be frustrated by, we'll need to at a minimum write</p>\n<ul>\n<li>a tooltip explaining, in complete sentences, that we've analyzed the password and it would be easy to crack</li>\n<li>a help page like the Wordpress one linked above, that explains in several paragraphs why we have this plus good standard advice on making a strong password.</li>\n</ul>",
        "id": 284049,
        "sender_full_name": "Greg Price",
        "timestamp": 1505783267
    },
    {
        "content": "<p>haha, that was the original motivation for <a href=\"https://github.com/zulip/zulip/pull/5614\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/5614\">#5614</a>, but you convinced me out of it on the issue thread. I think having to read a long doc to figure out a password that works is a big barrier to creating an account, especially if you're just casually checking out a community or a potential first-in-realm casually checking out zulip.<br>\nSo I think I'm still inclined towards something that gets them in the door quickly.</p>",
        "id": 284052,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1505790462
    },
    {
        "content": "<p>I have made changes which <span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span>  mentioned in PR <a href=\"https://github.com/zulip/zulip/pull/6513\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6513\">#6513</a>.<br>\nNow I am working on WordPress, and their validation to password, how they have implemented zxcvbn. <br>\nIf have there is any additional functionality which should be added or any more suggestions like WordPress, then let me know.</p>",
        "id": 284127,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1505823503
    },
    {
        "content": "<blockquote>\n<p>haha, that was the original motivation for <a href=\"https://github.com/zulip/zulip/pull/5614\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/5614\">#5614</a>, but you convinced me out of it on the issue thread.</p>\n</blockquote>\n<p>Ha <img alt=\":stuck_out_tongue:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f61b.png\" title=\"stuck out tongue\"> . I do agree that if you end up having to read a long doc to find a password that works, that's a big barrier.</p>",
        "id": 284328,
        "sender_full_name": "Greg Price",
        "timestamp": 1505854650
    },
    {
        "content": "<p>Here's another possible compromise:</p>\n<ul>\n<li>Have a password meter -- much like we do now, perhaps plus a word like Weak/Medium/Strong.</li>\n<li>If the user submits a password below a strong threshold (like our current one), give them a warning that the password isn't good, with a few words of standard advice and maybe a link to more standard advice. But let them click through that warning.</li>\n<li>If the user submits a password below a <em>low</em> threshold -- like the top 100k passwords or something, which I think is 0.1 on our scale -- then actually require them to do better. Enforce that on the server, just like we enforce a threshold today.</li>\n</ul>",
        "id": 284329,
        "sender_full_name": "Greg Price",
        "timestamp": 1505854904
    },
    {
        "content": "<p>That low threshold should be enough to forbid passwords like \"aaaaaa\" and \"abc123\". But the passwords people are used to making that pass other sites' checks, like \"word1term!\", will pass.</p>",
        "id": 284335,
        "sender_full_name": "Greg Price",
        "timestamp": 1505855204
    },
    {
        "content": "<p>In particular, the low threshold can be enough (given some rate-limiting) to defend against online attacks, which is the basic minimum we need of the user's cooperation in helping us prevent their account from being stolen.</p>\n<p>They should be making strong passwords that resist offline attacks, because they should be hedging against any given service they use potentially getting compromised and the hashed passwords leaked. But for that to actually happen to a given service is a low-probability event, and it's not worth it to block the user from using Zulip if they aren't ready for that.</p>",
        "id": 284337,
        "sender_full_name": "Greg Price",
        "timestamp": 1505855869
    },
    {
        "content": "<p>I remain curious what parameters WordPress is using! My guess is that the threshold they're enforcing is lower than the one we have that frustrated multiple software engineers at the PyCon sprint.</p>",
        "id": 284338,
        "sender_full_name": "Greg Price",
        "timestamp": 1505855972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span> One handy tool for experimenting with zxcvbn thresholds: <a href=\"https://www.bennish.net/password-strength-checker/\" target=\"_blank\" title=\"https://www.bennish.net/password-strength-checker/\">https://www.bennish.net/password-strength-checker/</a> provides a running zxcvbn with lots of detail, telling you how much entropy it finds in a given password you make up. That's how I validated \"word1term!\" as an example of a password we'd reject today (&lt;29.2 bits, IIUC) but would pass the \"low\" threshold I suggested (13.3 bits).</p>",
        "id": 284340,
        "sender_full_name": "Greg Price",
        "timestamp": 1505856298
    },
    {
        "content": "<p>Could be handy for trying passwords of different strengths at <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> and seeing what they take. <img alt=\":wink:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f609.png\" title=\"wink\"></p>",
        "id": 284341,
        "sender_full_name": "Greg Price",
        "timestamp": 1505856331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span>  <span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span>   I have make some changes.<br>\nWhat are suggestions about this page?<br>\n<a href=\"/user_uploads/2/a0/gRR2-HTDy0HDcuI5i_8xFkg8/passChecker.gif\" target=\"_blank\" title=\"passChecker.gif\">passChecker.gif</a> <br>\nIf you want to add a link to some article, then let me know. Cause I don't know to which article should we direct user for more password advice.<br>\nAnd About WordPress I think, they are allowing low password quality on signup page. But they have high password quality when we change password page. So they have set different password quality for signup and password reset.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/a0/gRR2-HTDy0HDcuI5i_8xFkg8/passChecker.gif\" target=\"_blank\" title=\"passChecker.gif\"><img src=\"/user_uploads/2/a0/gRR2-HTDy0HDcuI5i_8xFkg8/passChecker.gif\"></a></div>",
        "id": 285641,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506060094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span> That is an interesting finding re: WordPress?</p>\n<p>Can you work out what specific thresholds they're using? That'd be the key bit of information to be able to reproduce something similar (or to do it differently in a way that's based on their experience.)</p>",
        "id": 286369,
        "sender_full_name": "Greg Price",
        "timestamp": 1506125349
    },
    {
        "content": "<p>One quick data point on WordPress's threshold: my example password above which fails our current test, \"word1term!\", handily passes. In fact, so does just \"word1term\" or even \"word1ter\".</p>",
        "id": 286370,
        "sender_full_name": "Greg Price",
        "timestamp": 1506125842
    },
    {
        "content": "<p>Method: I opened <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> in an incognito window, and went to make an account for a made-up email address.</p>",
        "id": 286372,
        "sender_full_name": "Greg Price",
        "timestamp": 1506125913
    },
    {
        "content": "<p>... Though testing just now on <a href=\"http://chat.zulip.org\" target=\"_blank\" title=\"http://chat.zulip.org\">chat.zulip.org</a> (again in an incognito window), it actually takes \"word1term!\", so I apparently still don't quite understand our threshold. But it rejects \"word1term\".</p>",
        "id": 286373,
        "sender_full_name": "Greg Price",
        "timestamp": 1506125961
    },
    {
        "content": "<p>(So our threshold is indeed stricter than WordPress's, at least at signup.)</p>",
        "id": 286374,
        "sender_full_name": "Greg Price",
        "timestamp": 1506126115
    },
    {
        "content": "<p>Some thoughts on the flow in that gif (which is a really handy format! thanks for sending that):</p>\n<ul>\n<li>I think clicking on a link like that is going to feel clumsy. I like what <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> does, actually -- as soon as you defocus the password field, it validates it and shows any error. (Another thing I think could work well is a tooltip.)</li>\n<li>We should present just one message about the password; not one in small red type and a different one below it.</li>\n</ul>",
        "id": 286375,
        "sender_full_name": "Greg Price",
        "timestamp": 1506126330
    },
    {
        "content": "<p>Also, how do you make a screenshot-anigif like that? I'd like to do it to demonstrate the <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> flow :)</p>",
        "id": 286376,
        "sender_full_name": "Greg Price",
        "timestamp": 1506126356
    },
    {
        "content": "<p>I am working on threshold of WordPress. <br>\n And I am using Peek <a href=\"https://github.com/phw/peek\" target=\"_blank\" title=\"https://github.com/phw/peek\">https://github.com/phw/peek</a> for gif. :)</p>",
        "id": 286405,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506134622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span>  I have tried some passwords. And this is what I am getting.<br>\nPASSWORD--------------ACCEPTED------------- CRACK_TIME ---------- SCORE <br>\n\"Adf3#!1\" --------------------- no  ---------------------  9 days  ------------------  3     <br>\n\"a!Adfs#\" --------------------- yes  --------------------   8 days  ------------------  3       <br>\n\"word1term!\" ---------------  yes --------------------- 12 min ------------------  2<br>\n\"word1term\"----------------- yes  --------------------- 4 min  ------------------  2<br>\n\"myworld2\" ----------------- yes  --------------------- 10 sec ------------------- 1<br>\n\"stupid23\"-------------------  yes ---------------------- 16 sec -------------------1<br>\nAs you can see, passwords like \"Adf3#!1\" have much higher crack time than \"myworld2\", but it is not accepted and \"myworld2\" is accepted. <br>\nWhat should I do to find it's threshold, should I find pattern in this password or do something else?<br>\nThis crack_time and score information are from <a href=\"https://www.bennish.net/password-strength-checker/\" target=\"_blank\" title=\"https://www.bennish.net/password-strength-checker/\">https://www.bennish.net/password-strength-checker/</a></p>\n<p><a href=\"https://www.bennish.net/password-strength-checker/\" target=\"_blank\" title=\"https://www.bennish.net/password-strength-checker/\">https://www.bennish.net/password-strength-checker/</a> is showing different crack time. So I am trying to directly pass this password to zxcvbn function. And then again analyse, passwords strength. Will give you update, as I will finish.</p>",
        "id": 286421,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506145461
    },
    {
        "content": "<p>According to my analysis, WordPress uses approximately 0.3 quality threshold. But maybe it do not accept password only on basis of this zxcvbn quality.<br>\nPassword like \"aaaaaa23\" has 0.045 quality, but it is accepted. Actually any string which have more than 6 character and either more than 2 digits (\"aaaaaa23\") or more than 1 special character(*,@,&amp;..)(\"aaaaaa@\") are accepted, without checking zxcvbn quality.<br>\n And strings which have only characters (no digits or no special character, like \"yashashvi\") is not accepted, whether they have 0.42 quality.<br>\nLet me know, if I am going in wrong direction, :)</p>",
        "id": 286431,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506154393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span> Interesting! \"aaaaaa23\" is a great test example -- I think that conclusively demonstrates that Wordpress is not applying any meaningful zxcvbn threshold :)</p>",
        "id": 287058,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367011
    },
    {
        "content": "<p>As a small variation on that, even \"aaaaaa!\" is accepted. That's 8.5 bits of entropy according to zxcvbn (as deployed on the <a href=\"http://bennish.net\" target=\"_blank\" title=\"http://bennish.net\">bennish.net</a> checker), which is essentially nothing -- less than two random letters.</p>",
        "id": 287060,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367140
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://www.bennish.net/password-strength-checker/\" target=\"_blank\" title=\"https://www.bennish.net/password-strength-checker/\">https://www.bennish.net/password-strength-checker/</a> is showing different crack time.</p>\n</blockquote>\n<p>Oh, yeah, I noticed that and should have mentioned my analysis of it. The measurement that should be most meaningful to compare across different ways of using a tool like zxcvbn is the \"entropy\" -- the other things like crack time, or \"quality\" or \"strength\", are just computed from the entropy plus additional assumptions that might vary.</p>",
        "id": 287065,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367360
    },
    {
        "content": "<p>A password with N bits of entropy means basically that you'd have to be searching through a pool of 2^N possible passwords to expect to find that one. (The exact meaning isn't super well defined here, but I think different choices in the nuance of the definition should change the result by at most a bit or two.)</p>\n<p>So, you might say that'd mean that if you can try R passwords per second, it will take 2^N / R seconds to crack the password.</p>\n<p>But of course the attacker may get lucky and the password happens to be among the first ones they try. That's just as likely as that it's among the last ones -- so the average, or expected, time is how long it takes them to get halfway through the pool. Which is 2^N / (2R).</p>",
        "id": 287066,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367605
    },
    {
        "content": "<p>Taking \"aaaaaa23\" as an example, the figures on <a href=\"http://bennish.net\" target=\"_blank\" title=\"http://bennish.net\">bennish.net</a> are<br>\nN = 16.816 bits entropy<br>\nT = 5.767 seconds crack time</p>\n<p>So if T = 2^N / (2R), then R = 2^N / (2T), and</p>\n<div class=\"codehilite\"><pre><span></span>$ qalc &#39;2**16.816 / 2 / 5.767&#39;\n((2^16.816) / 2) / 5.767 = approx. 10003.235\n</pre></div>\n\n\n<p>So they're assuming R = 10k tries per second, and giving the expected crack time.</p>",
        "id": 287067,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367791
    },
    {
        "content": "<p>In some of my calculations above in this thread, I was just doing 2^N / R, which gives crack times twice as long. That may be the discrepancy you saw.</p>",
        "id": 287068,
        "sender_full_name": "Greg Price",
        "timestamp": 1506367837
    },
    {
        "content": "<blockquote>\n<p>As a small variation on that, even \"aaaaaa!\" is accepted.</p>\n</blockquote>\n<p>Oh, in fact you already covered that :), with \"aaaaaa@\".</p>",
        "id": 287072,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368268
    },
    {
        "content": "<p>So, I'm not entirely sure what to make of the data we have here. WordPress clearly isn't enforcing any material zxcvbn requirement on trying to create a blog. That despite having a help page updated a few months ago that says they are:<br>\n<a href=\"https://wpengine.com/support/strong-passwords/\" target=\"_blank\" title=\"https://wpengine.com/support/strong-passwords/\">https://wpengine.com/support/strong-passwords/</a><br>\nas well as a change less than a year ago that updated the version they use:<br>\n<a href=\"https://core.trac.wordpress.org/ticket/31647\" target=\"_blank\" title=\"https://core.trac.wordpress.org/ticket/31647\">https://core.trac.wordpress.org/ticket/31647</a></p>",
        "id": 287075,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368387
    },
    {
        "content": "<p>Maybe they don't enforce it when creating a blog, but then for <em>subsequent</em> users they do? That wouldn't quite live up to what their docs claim -- surely the blog's creator is an Administrator -- but there'd be something there.</p>",
        "id": 287076,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368499
    },
    {
        "content": "<p>Either way, this sure looks to me like another large, mass-user-facing webapp (after Dropbox) proudly adopting zxcvbn and trumpeting it to the world, then quietly retreating sometime later into not actually enforcing it.</p>",
        "id": 287077,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368581
    },
    {
        "content": "<p>With that very interesting data about WordPress in hand, I like the compromise design I mentioned the other day:</p>\n<blockquote>\n<p>Here's another possible compromise:<br>\n* Have a password meter -- much like we do now, perhaps plus a word like Weak/Medium/Strong.<br>\n* If the user submits a password below a strong threshold (like our current one), give them a warning that the password isn't good, with a few words of standard advice and maybe a link to more standard advice. But let them click through that warning.<br>\n* If the user submits a password below a <em>low</em> threshold -- like the top 100k passwords or something, which I think is 0.1 on our scale -- then actually require them to do better. Enforce that on the server, just like we enforce a threshold today.</p>\n</blockquote>",
        "id": 287080,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368841
    },
    {
        "content": "<p>That seems quite reasonable.</p>",
        "id": 287081,
        "sender_full_name": "Robert",
        "timestamp": 1506368916
    },
    {
        "content": "<p>That'd give us the flexibility to bow to the reality of the difficulty many people have in making an actual strong password, just like <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> and Dropbox have before us; while enforcing at least a minimum requirement, and doing our bit to give people a nudge to do better.</p>",
        "id": 287082,
        "sender_full_name": "Greg Price",
        "timestamp": 1506368963
    },
    {
        "content": "<p>We could also in the future, if even a low zxcvbn threshold proves to be too difficult for many users, switch the enforced rule to something like the \"at least two numbers or one punctuation, plus some letters\" rule that <a href=\"http://wordpress.com\" target=\"_blank\" title=\"http://wordpress.com\">wordpress.com</a> seems to be using, while continuing to apply a real zxcvbn threshold for avoiding the warning.</p>",
        "id": 287083,
        "sender_full_name": "Greg Price",
        "timestamp": 1506369093
    },
    {
        "content": "<p>Most people will just append letters onto the end anyway.</p>",
        "id": 287085,
        "sender_full_name": "Robert",
        "timestamp": 1506369150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span>  I have updated PR <a href=\"https://github.com/zulip/zulip/pull/6513\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6513\">#6513</a>, but it's throwing this Travis CI error in casper test. Waiting for your suggestions about PR. And about the Travis CI error if you have any solution then let me know.</p>",
        "id": 288088,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506502976
    },
    {
        "content": "<p>What is a reasonable number of guesses/sec for an online attack (should we assume our rate-limiting is working?), and what we want the crack time to be?</p>",
        "id": 289304,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506638571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span> <span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> and I were talking about this yesterday.</p>",
        "id": 289313,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506638880
    },
    {
        "content": "<p>Good question! I was just thinking about this earlier today. :-)</p>\n<p>For an online attack, our rate-limiting is pretty flexible in its ability to put different limits on different periods of time.</p>\n<p>I think we can also make successful logins not consume the quota -- we'd have to check the quota <em>first</em>, so if you've had a lot of guesses then it's rejected without even checking if the password is right, so as not to leak the information subtly, but then if authentication succeeds we can \"refund\" it so that it doesn't get in the way of future logins.</p>",
        "id": 289314,
        "sender_full_name": "Greg Price",
        "timestamp": 1506638893
    },
    {
        "content": "<p>That then lets us put really tight limits on longer periods like a day or a month, without getting in the way of someone who mistypes their password a couple of times in a row.</p>",
        "id": 289317,
        "sender_full_name": "Greg Price",
        "timestamp": 1506638944
    },
    {
        "content": "<p>So for the max guesses against a target user, we could set something like</p>\n<ul>\n<li>&lt;=1 per 1s</li>\n<li>&lt;=5 per day (=86.4 ks)</li>\n<li>&lt;=20 per month (~=2.5 Ms)</li>\n</ul>",
        "id": 289318,
        "sender_full_name": "Greg Price",
        "timestamp": 1506639057
    },
    {
        "content": "<p>At that point, if your password comes from a space of at least 100k candidates, or has at least 16 bits of entropy, then an attacker trying for a year has well under a 1% chance of cracking it.</p>",
        "id": 289319,
        "sender_full_name": "Greg Price",
        "timestamp": 1506639182
    },
    {
        "content": "<p>5/day seems pretty harsh.  I would probably aim for more like 10 in an hour, 20 in a day.  Basically to minimize the risk of real people getting hit trying a bunch of passwords while still making brute-forcing hard.</p>",
        "id": 289324,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506639452
    },
    {
        "content": "<p>Sure -- doesn't change the bottom-line answer much.</p>",
        "id": 289328,
        "sender_full_name": "Greg Price",
        "timestamp": 1506639513
    },
    {
        "content": "<p>I think 1% in a year is probably a fine test for being ~safe from cracking</p>",
        "id": 289332,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506639606
    },
    {
        "content": "<p>If we add 30 bits for (optimistically) 1B users, that brings us to ~50 bits?</p>",
        "id": 289337,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506639752
    },
    {
        "content": "<p>These are per-target-user limits -- the number of users on the system shouldn't matter.</p>",
        "id": 289340,
        "sender_full_name": "Greg Price",
        "timestamp": 1506639911
    },
    {
        "content": "<p>We'll also want per-source-IP limits, to make it harder for an attacker to try passwords on tons of users in parallel. Even then they'll be trying (user, password) pairs, though, so us having more users won't give them an advantage.</p>",
        "id": 289342,
        "sender_full_name": "Greg Price",
        "timestamp": 1506639989
    },
    {
        "content": "<p>Well, depends a bit on what sort of attacks you're looking at.  If they're using 10K IPs each attacking a different user, then the'll get 100 accounts after a year if this is per-user.</p>",
        "id": 289343,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506640009
    },
    {
        "content": "<p>Assuming every user they attack is at the very minimum defense, etc.</p>",
        "id": 289345,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506640056
    },
    {
        "content": "<p>10K IPs doing that sort of password guessing attack would probably be noticable, though.</p>",
        "id": 289346,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506640071
    },
    {
        "content": "<p>So I don't see a reason one would need 30 bits.  I could imagine doing 1-10 more bits, but no more than that.</p>",
        "id": 289347,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506640124
    },
    {
        "content": "<p>I see. Yeah, I think we don't want to try to set it based on \"probability that an attacker ever guesses any user's password\".</p>\n<p>Rather, we would if these bits of entropy came from computers so they were cheap, but they come from humans and it's really hard to get humans to make up and remember a lot of entropy.</p>",
        "id": 289348,
        "sender_full_name": "Greg Price",
        "timestamp": 1506640137
    },
    {
        "content": "<p>yeah, I'm fine with that logic</p>",
        "id": 289349,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506640179
    },
    {
        "content": "<p>Someone should double-check the math, but I think the conversion from entropy (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span></span></span></span>) to our funny number is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn><mn>1</mn><mi mathvariant=\"normal\">.</mi><mn>7</mn><mo>−</mo><mn>0</mn><mi mathvariant=\"normal\">.</mi><mn>4</mn><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k/31.7 - 0.42</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">3</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">7</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">0</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">4</span><span class=\"mord mathrm\">2</span></span></span></span>. <br>\nSo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">k=20</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">2</span><span class=\"mord mathrm\">0</span></span></span></span> gives 0.21, and add .03 for each additional bit of entropy.</p>",
        "id": 289428,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506643959
    },
    {
        "content": "<p>I think (A) we should change the units to be bits and (B) I would write out the math somewhere in a Paper doc or something.  We'll want to put it in our docs.</p>",
        "id": 289430,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506644032
    },
    {
        "content": "<p>agreed with changing to bits. By math you mean where the 20 (or whatever default we decide in the end) comes from? <br>\nAll the math is math from our own codebase, that we should just delete; zxcvbn is happy to talk in bits of entropy.</p>",
        "id": 289433,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506644354
    },
    {
        "content": "<p>Yeah, I just studied the history today and realized where our funny number came from -- it was invented to just make a reasonable percentage to fill the bar to, and was never intended to be meaningful. It became the configured quantity basically by accident. :-)</p>",
        "id": 289441,
        "sender_full_name": "Greg Price",
        "timestamp": 1506646226
    },
    {
        "content": "<p>So we should delete that logic (except maybe keep a version for the bar, but then we can feel free to tweak that at will) and migrate the threshold to be in terms of bits.</p>",
        "id": 289442,
        "sender_full_name": "Greg Price",
        "timestamp": 1506646316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span> So following this discussion, I think I have a good idea of where we want to take this. Let's start by setting a good foundation in the core behavior, now that we better understand how it works today and how we want it to work.</p>",
        "id": 289446,
        "sender_full_name": "Greg Price",
        "timestamp": 1506646910
    },
    {
        "content": "<p>That means</p>\n<ul>\n<li>Make a new setting to replace PASSWORD_MIN_ZXCVBN_QUALITY, with a name like PASSWORD_MIN_ENTROPY_BITS. In static/js/common.js, you can use the <code>guesses_log10</code> value from zxcvbn, and just multiply by $$ \\log_2 10 $$, i.e. 3.322, to get an entropy in bits to compare to that setting.</li>\n</ul>",
        "id": 289447,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647160
    },
    {
        "content": "<ul>\n<li>For compatibility with existing installs with a PASSWORD_MIN_ZXCVBN_QUALITY, we can check for that setting in <code>zproject/settings.py</code>, and convert it to the new form.</li>\n</ul>",
        "id": 289448,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647290
    },
    {
        "content": "<p>how about PASSWORD_MIN_ZXCVBN_ENTROPY?</p>",
        "id": 289449,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506647364
    },
    {
        "content": "<p>Could do PASSWORD_MIN_ZXCVBN_ENTROPY_BITS. I think the units are important -- particularly as zxcvbn itself seems to provide the entropy only in base 10.</p>",
        "id": 289450,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647410
    },
    {
        "content": "<p>But I'm inclined to leave zxcvbn out of the name of this setting, and instead treat it as an implementation detail (a documented one) of how we estimate the entropy.</p>",
        "id": 289453,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647441
    },
    {
        "content": "<p>Like if in the future there's some better thing to use instead, we'd want to keep the setting and just swap out the implementation. Or if we had both zxcvbn and the other thing available for some reason, I think we'd want one entropy level and a separate switch to choose between them.</p>",
        "id": 289455,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647508
    },
    {
        "content": "<p>I think <code>PASSWORD_MIN_ENTROPY_BITS</code> is fine.  Agreed units are important.</p>",
        "id": 289456,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506647512
    },
    {
        "content": "<ul>\n<li>I think we should enforce the minimum password strength on the server side, in addition to the client. <a href=\"https://github.com/dwolfhub/zxcvbn-python\" target=\"_blank\" title=\"https://github.com/dwolfhub/zxcvbn-python\">zxcvbn-python</a> hopefully makes that easy to do.</li>\n</ul>",
        "id": 289458,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647547
    },
    {
        "content": "<ul>\n<li>Oh, the discussion of password strength in docs/security-model.md will have to change to match the change in config. I'm happy to write the new version of that and just put it on top of a PR that makes the code changes.</li>\n</ul>",
        "id": 289459,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647673
    },
    {
        "content": "<ul>\n<li>We should lower the default value to something like <code>PASSWORD_MIN_ENTROPY_BITS = 16</code>. That should be a separate commit from the one that changes the config setup -- this commit will go along with updating docs/security-model.md again to explain the number we choose and why. I think I'll just write this commit myself, since it's basically one line of code and a lot of text :), and once the change in the name and meaning of the config variable is done, this doesn't really interact with any of the other code.</li>\n</ul>",
        "id": 289460,
        "sender_full_name": "Greg Price",
        "timestamp": 1506647916
    },
    {
        "content": "<ul>\n<li>\n<p>With the lower threshold value, that should take a lot of the pressure off of trying to explain to users why their password isn't being accepted, because we should be much more in line with people's expectations of what it takes to make an acceptable password on the Web.</p>\n<p>We should still do a round of making the registration, password-reset, and password-change forms look good and display feedback clearly, but this should help a lot in doing that successfully.</p>\n</li>\n</ul>",
        "id": 289462,
        "sender_full_name": "Greg Price",
        "timestamp": 1506648136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"yashashvidave@gmail.com\" data-user-id=\"3244\">@Yashashvi Dave</span> If you're up for making these changes, that would be great! I think probably the cleanest thing is to make a new PR for switching to PASSWORD_MIN_ENTROPY_BITS. Then when that's merged, we can take another crack at <a href=\"https://github.com/zulip/zulip/pull/6513\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6513\">#6513</a> on top of those changes.</p>",
        "id": 289463,
        "sender_full_name": "Greg Price",
        "timestamp": 1506648241
    },
    {
        "content": "<p>I am on it. Will update as I complete.</p>",
        "id": 289471,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506649379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> <br>\nHere is what I am going to do first, If any changes or any additional tasks please correct me.</p>\n<ul>\n<li>\n<p>Changing<code>PASSWORD_MIN_ZXCVBN_QUALITY</code> to <code>PASSWORD_MIN_ENTROPY_BITS</code> for threshold, changing <code>zproject/setting.py</code>, <code>zproject/dev_setting.py</code></p>\n</li>\n<li>\n<p>Write a function in <code>static/js/common.js</code> which compare <code>PASSWORD_MIN_ENTROPY_BITS</code> to zxcvbn <code>result.guesses_log10</code> (multiply by $$ \\log_2 10 $$) and then return whether password is acceptable or not. (just like password_quality function in <code>static/js/common.js</code> is returning)</p>\n</li>\n<li>\n<p>Writing tests for function which is declared in <code>static/js/common.js</code> in <code>frontend_tests/node_tests/password.js</code></p>\n</li>\n</ul>\n<blockquote>\n<p>For compatibility with existing installs with a PASSWORD_MIN_ZXCVBN_QUALITY, we can check for that setting in zproject/settings.py, and convert it to the new form.</p>\n</blockquote>\n<p>I don't get this point, so kindly elaborate it more :)</p>",
        "id": 289517,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506660271
    },
    {
        "content": "<p>I think Greg was just saying that people with current installs already have a PASSWORD_MIN_ZXCVBN_QUALITY that they have set, and we don't want to make them have to edit their configuration.</p>\n<p>So, in zproject/settings.py, we can have a bit of code like</p>\n<div class=\"codehilite\"><pre><span></span>if PASSWORD_MIN_ZXCVBN_QUALITY is set\n    PASSWORD_MIN_ENTROPY_BITS = log_2(e**(22*PASSWORD_MIN_ZXCVBN_QUALITY) * 10000)\n</pre></div>\n\n\n<p>or whatever the crazy formula is. (Also the code above is not quite correct; you may also have to remove PASSWORD_MIN_ZXCVBN_QUALITY from DEFAULT_SETTINGS first.)</p>",
        "id": 289519,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506660674
    },
    {
        "content": "<p>also, not sure if this is helpful, but it might be: <a href=\"http://zulip.readthedocs.io/en/latest/settings.html\" target=\"_blank\" title=\"http://zulip.readthedocs.io/en/latest/settings.html\">http://zulip.readthedocs.io/en/latest/settings.html</a><br>\nThe settings system is somewhat complicated, so totally par for the course if it still doesn't make sense.</p>",
        "id": 289520,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506661071
    },
    {
        "content": "<p>Thank You <span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span> I get it.</p>",
        "id": 289521,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506661169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> I have created PR <a href=\"https://github.com/zulip/zulip/pull/6768\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6768\">#6768</a>, to change PASSWORD_MIN_ZXCVBN_QUALITY to PASSWORD_MIN_ENTROPY_BITS, please check that out.</p>",
        "id": 289585,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506684727
    },
    {
        "content": "<blockquote>\n<p>For compatibility with existing installs with a PASSWORD_MIN_ZXCVBN_QUALITY, we can check for that setting in zproject/settings.py, and convert it to the new form.</p>\n</blockquote>\n<p>I actually would be fine with just documenting the change in the release notes rather than converting the format.</p>",
        "id": 289745,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1506703979
    },
    {
        "content": "<p>and require people to change it manually as a part of the upgrade process?</p>",
        "id": 289775,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1506704776
    },
    {
        "content": "<p>The impact of that is that if they don't notice, then their choice of threshold has no effect and it reverts to the default. I don't have a strong preference -- the impact is small.</p>",
        "id": 290255,
        "sender_full_name": "Greg Price",
        "timestamp": 1506724589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> Updated PR <a href=\"https://github.com/zulip/zulip/pull/6768\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6768\">#6768</a> with changes mentioned.</p>",
        "id": 290356,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1506750072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> Hey, just a reminder. PR <a href=\"https://github.com/zulip/zulip/pull/6832\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6832\">#6832</a> is merged. So If you can check out PR <a href=\"https://github.com/zulip/zulip/pull/6513\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/6513\">#6513</a> and give me suggestions or changes for format. So I will include them when I update PR with new password_guesses changes.</p>",
        "id": 295592,
        "sender_full_name": "Yashashvi Dave",
        "timestamp": 1507550062
    },
    {
        "content": "<p>Slightly off topic, but the US govt (I think? at least the global entry site, for those familiar with it) has a new registration/login flow that is great. In any case, they are using zxcvbn :). <br>\nI didn't try to figure out what entropy level they are using, but I imagine they'll be a little more conservative than tech company sites. They also require two factor authentication, and interestingly don't have a password reset if you lose your password (or rather, they give you a 1-time key you can use to reset your password, and if you lose that key you're out of luck / probably have to do some more extreme thing to prove to government who you are.)</p>",
        "id": 319926,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1510363132
    },
    {
        "content": "<p>Glad it's seeing more use! There was an announcement about a year ago by 18F (a web/tech consulting shop inside the US federal government) that they were working on it:<br>\n<a href=\"https://twitter.com/18f/status/778637006075154432\" target=\"_blank\" title=\"https://twitter.com/18f/status/778637006075154432\">https://twitter.com/18f/status/778637006075154432</a><br>\nSo maybe this is another government client of 18F being persuaded by them to use it.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/18f/status/778637006075154432\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"/external_content/e59a9c835a5371174df837445170697ecc399d99/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3838313931313531383035323232393132302f43585271306e63665f6e6f726d616c2e6a7067\"></a><p>We're designing a login UI for <a href=\"https://t.co/b24KP104N0\" target=\"_blank\" title=\"https://t.co/b24KP104N0\">https://login.gov</a> built on Dropbox's open source <a href=\"https://t.co/7ymNnESev3\" target=\"_blank\" title=\"https://t.co/7ymNnESev3\">https://github.com/dropbox/zxcvbn</a> to measure password strength: <a href=\"https://t.co/tUwV59CBgR\" target=\"_blank\" title=\"https://t.co/tUwV59CBgR\">https://twitter.com/18F/status/778637006075154432/photo/1</a></p><span>- 18F (@18F)</span></div></div>",
        "id": 324865,
        "sender_full_name": "Greg Price",
        "timestamp": 1510705094
    }
]