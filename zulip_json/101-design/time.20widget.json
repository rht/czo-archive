[
    {
        "content": "<p>There was some work on a time widget at some point, where you could say <code>meet me at **time:5pm**</code> (I don't remember the syntax, it wasn't that) and it would show up in the users' timezone. I can't find the PR for it; does anyone know the status of it? <br>\nIf it's fast, will be useful once we have <code>/remind</code>.</p>",
        "id": 481551,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517769753
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/zulip/zulip/pull/5176\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/5176\">#5176</a> <span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span></p>",
        "id": 481561,
        "sender_full_name": "Aman (amanagr)",
        "timestamp": 1517770468
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 481562,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517770572
    },
    {
        "content": "<p>I was working on this issue but I hit some problems with parsing timezones so all input is assumed to be in GMT. That's perhaps the only major thing holding this back from being merged.</p>",
        "id": 481758,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1517787477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"adi.bansal241996@gmail.com\" data-user-id=\"1113\">@Aditya Bansal</span> I was actually meaning to ask you to take a look at this one if you're free. You worked with timezones recently, right? I'll rebase and clean up some of the commit history in the PR <a href=\"https://github.com/zulip/zulip/pull/5253\" target=\"_blank\" title=\"https://github.com/zulip/zulip/pull/5253\">#5253</a>.</p>",
        "id": 481769,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1517787963
    },
    {
        "content": "<p>Nevermind that. I fixed it to some extent. You can test it at: <a href=\"https://nightly.zulipdev.org/#narrow/stream/testing/topic/timestamp\" target=\"_blank\" title=\"https://nightly.zulipdev.org/#narrow/stream/testing/topic/timestamp\">https://nightly.zulipdev.org/#narrow/stream/testing/topic/timestamp</a></p>",
        "id": 481843,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1517796133
    },
    {
        "content": "<p><a href=\"/user_uploads/2/27/8fid10UMlRYB7uwJwvV1Kf96/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/27/8fid10UMlRYB7uwJwvV1Kf96/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/2/27/8fid10UMlRYB7uwJwvV1Kf96/pasted_image.png\"></a></div><p>The syntax is <code>!time(6 Feb 2018, 10:30 am IST)</code> and other similar date formats.</p>",
        "id": 481845,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1517796348
    },
    {
        "content": "<p>can we use the parser we use for /remind? I forget what it is, but it allows things like \"tomorrow at 9am\" (similar to dateutil.parser)</p>",
        "id": 481916,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517808260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"rishig@zulipchat.com\" data-user-id=\"131\">@Rishi Gupta</span> so I have not yet incorporated the dateparser from scrappinghub because it was heavy to load. It increased our app's startup time. So we can't do things like \"tomorrow at 9am\"</p>",
        "id": 481958,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517812690
    },
    {
        "content": "<p>Mostly its heavy because it loads all the language files into memory (it supports dates and text in multiple languages) and at the moment has no way to disable loading languages to memory</p>",
        "id": 481959,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517812798
    },
    {
        "content": "<p>are we talking loading on the backend or the frontend?</p>",
        "id": 481961,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517812885
    },
    {
        "content": "<p>also there is always dateutil.parser if the scrappinghub one doesn't work out</p>",
        "id": 481963,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517812903
    },
    {
        "content": "<p>we are talking for the backend</p>",
        "id": 481964,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517812994
    },
    {
        "content": "<p>yeah I am using <code>dateutil.parser</code></p>",
        "id": 481965,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517813006
    },
    {
        "content": "<p>Though it isn't as flexible as dateparser.</p>",
        "id": 481966,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517813027
    },
    {
        "content": "<p>interesting. possibly we could eventually fork the scrappinghub one, but dateutil.parser isn't bad; it'll definitely handle \"tomorrow at 9am\"</p>",
        "id": 481967,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517813165
    },
    {
        "content": "<p>Nope it doesn't</p>",
        "id": 481970,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517813257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>from dateutil.parser import parse\n&gt;&gt;&gt; parse(&#39;tomorrow at 9am&#39;)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/srv/zulip-py3-venv/lib/python3.4/site-packages/dateutil/parser.py&quot;, line 1182, in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n  File &quot;/srv/zulip-py3-venv/lib/python3.4/site-packages/dateutil/parser.py&quot;, line 559, in parse\n    raise ValueError(&quot;Unknown string format&quot;)\nValueError: Unknown string format\n&gt;&gt;&gt;\n</pre></div>",
        "id": 481971,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517813270
    },
    {
        "content": "<p>:/. Does it do just \"tomorrow\"?</p>",
        "id": 481974,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1517813343
    },
    {
        "content": "<p>nope</p>",
        "id": 481975,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517813373
    },
    {
        "content": "<p>I'm also using dateutil.parser for this code and added timezone support using pytz.</p>",
        "id": 482295,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1517831738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"adi.bansal241996@gmail.com\" data-user-id=\"1113\">@Aditya Bansal</span> How much did that library increase startup time by? I wonder if we could pull it in lazily, like only when the user starts doing <code>/remind</code>.</p>",
        "id": 482890,
        "sender_full_name": "Greg Price",
        "timestamp": 1517854536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"greg@zulipchat.com\" data-user-id=\"2187\">@Greg Price</span> I think it was around 800 ms to load the library but actually it started to break production tests in Travis. On investigation I found out that a sleep of around 20 sec was required before line 68 in <code>tools/travis/production-helper</code> so as to make that test pass. So I guess we can say a 20 sec increase in starting time.<br>\nBut this is for production only, worries were that it will not be nice development for a person who needs to re start dev again and again.</p>",
        "id": 482930,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517855472
    },
    {
        "content": "<p>Wow, yeah, 20s would not be acceptable. <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 482961,
        "sender_full_name": "Greg Price",
        "timestamp": 1517855953
    },
    {
        "content": "<p>But that seems like it's got to be a bug somewhere, not a fundamental issue with using the library</p>",
        "id": 482966,
        "sender_full_name": "Greg Price",
        "timestamp": 1517855993
    },
    {
        "content": "<p>not actually it takes time to load all those calender's and multi language corpus into the memory</p>",
        "id": 482971,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856059
    },
    {
        "content": "<p>currently it doesn't provide with an option to pre select a language and load relevant stuff.</p>",
        "id": 482974,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856098
    },
    {
        "content": "<p>I see - so it's 800ms to load the code of the library, but then the library goes off and loads a ton of data and that takes 20s?</p>",
        "id": 482979,
        "sender_full_name": "Greg Price",
        "timestamp": 1517856209
    },
    {
        "content": "<p>It'd also be fine to turn it off in the production test suite, if that's specifically an issue (though it should be in a test somewhere, maybe a Casper test)</p>",
        "id": 482981,
        "sender_full_name": "Greg Price",
        "timestamp": 1517856254
    },
    {
        "content": "<p>But also if it takes 20s for real users that is not acceptable <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 482984,
        "sender_full_name": "Greg Price",
        "timestamp": 1517856284
    },
    {
        "content": "<p>that part wasn't much clear to me either. Like I use this script to find out the times </p>\n<div class=\"codehilite\"><pre><span></span>import time\nt = time.time()\nimport dateparser\nprint(time.time() - t)\n</pre></div>\n\n\n<p>and the output was 0.7900817394256592'</p>",
        "id": 482988,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; import time\n&gt;&gt;&gt; t = time.time()\n&gt;&gt;&gt; from dateparser import parse\n&gt;&gt;&gt; parse(&#39;tomorrow at 10 am&#39;)\ndatetime.datetime(2018, 2, 6, 10, 0)\n&gt;&gt;&gt; print(time.time() - t)\n0.8362033367156982\n&gt;&gt;&gt;\n</pre></div>",
        "id": 482999,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856618
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; import time\n&gt;&gt;&gt; t = time.time()\n&gt;&gt;&gt; from dateparser import parse\n&gt;&gt;&gt; parse(&#39;tomorrow at 10 am&#39;)\ndatetime.datetime(2018, 2, 6, 10, 0)\n&gt;&gt;&gt; parse(&#39;tomorrow at 2 pm&#39;)\ndatetime.datetime(2018, 2, 6, 14, 0)\n&gt;&gt;&gt; print(time.time() - t)\n0.8110189437866211\n&gt;&gt;&gt;\n</pre></div>",
        "id": 483007,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856680
    },
    {
        "content": "<p>so it doesn't matter if you use parse 2 times or once if once the library is imported, total time is around 800 ms</p>",
        "id": 483010,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856734
    },
    {
        "content": "<p>the 20 sec time I told you about is at server startup and not at every time a message is sent.</p>",
        "id": 483015,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856765
    },
    {
        "content": "<p>I don't think files are re imported every time requests hit an endpoint?</p>",
        "id": 483017,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517856851
    },
    {
        "content": "<p>Wow, that's a really slow library.</p>",
        "id": 483630,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1517878648
    },
    {
        "content": "<p>I guess they probably compile regular expressions at startup needed to handle everything?</p>",
        "id": 483632,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1517878664
    },
    {
        "content": "<p>I don't really know how it works but yeah regular expressions are definitely a part of the process.</p>",
        "id": 483773,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1517886626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"adi.bansal241996@gmail.com\" data-user-id=\"1113\">@Aditya Bansal</span></p>",
        "id": 490915,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1518207534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"tabbott@zulipchat.com\" data-user-id=\"7\">@Tim Abbott</span> I would like to discuss this feature with you once.</p>\n<p>There are two time widget using features that are almost complete:</p>",
        "id": 490917,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1518207610
    },
    {
        "content": "<p>1. Adtiya's reminders<br>\n2. !time() syntax</p>",
        "id": 490919,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1518207629
    },
    {
        "content": "<p>Aditya included a widget that is active on <a href=\"https://nightly.zulipdev.org/#narrow/stream/testing\" target=\"_blank\" title=\"https://nightly.zulipdev.org/#narrow/stream/testing\">https://nightly.zulipdev.org/#narrow/stream/testing</a> right now, but we intend to have a way to have it show up as a typeahead.</p>",
        "id": 490922,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1518207671
    },
    {
        "content": "<p>yeah, basically the idea is we want to render the time picker in places where one needs to type in time and date manually</p>",
        "id": 490926,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1518207783
    },
    {
        "content": "<p>I was digging though our typeahead code and realised that our implementation would have to be mostly different. Typeaheads work by passing a list of matching options to show for the typed string, and we need to bypass all that work and render our component separately.</p>\n<p>What approach would you suggest? I was thinking of showing the widget by looking for a matching syntax and open brace (<code>!time(</code>) and close the widget using our recently merged list of closing characters. Basically, reuse that bit of code from typeahead.js but not the actual working of it.</p>",
        "id": 490929,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1518207809
    },
    {
        "content": "<p>yeah, I imagine we would probably be able to decouple positioning code from typeaheads if it isn't already and use that.</p>",
        "id": 490943,
        "sender_full_name": "Aditya Bansal",
        "timestamp": 1518208235
    },
    {
        "content": "<p>Hmm, yeah, it sounds like we might need to do something tricky like that...</p>",
        "id": 490965,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1518208585
    }
]