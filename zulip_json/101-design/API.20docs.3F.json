[
    {
        "content": "<p>Is there somewhere that describes the client&lt;-&gt;server API as seen from the client?</p>",
        "id": 571459,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524955861
    },
    {
        "content": "<p>You're probably looking for <a href=\"https://zulipchat.com/api\" target=\"_blank\" title=\"https://zulipchat.com/api\">https://zulipchat.com/api</a>?</p>",
        "id": 571464,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524956481
    },
    {
        "content": "<p>Ah, perfect, thanks</p>",
        "id": 571467,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524956524
    },
    {
        "content": "<p>We're currently planning some revisions to that documentation, so feedback is very welcome!</p>",
        "id": 571469,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524956555
    },
    {
        "content": "<p>ok, so the first question is how does a client login; those docs seem to assume you nab an API key from an existing client</p>",
        "id": 571471,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957203
    },
    {
        "content": "<p>then the next is whether registering a Queue is persistent; i.e. does a client tend to do that when the client starts up, or does it do it once for the user and keep using that queue for ever?</p>",
        "id": 571472,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957322
    },
    {
        "content": "<p>the other thing, which is what first sparked my curiosity, is whether there's any security on uploaded images/files - from what I can see there isn't, even for an image sent to someone in a private chat?</p>",
        "id": 571474,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957553
    },
    {
        "content": "<p>I'm not too familiar with the API, but does <a href=\"https://zulipchat.com/help/add-a-bot-or-integration\" target=\"_blank\" title=\"https://zulipchat.com/help/add-a-bot-or-integration\">https://zulipchat.com/help/add-a-bot-or-integration</a> help for your first question?</p>",
        "id": 571475,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1524957582
    },
    {
        "content": "<p>not that I'm seeing; that's how to use the existing client to get a key, not an API that turns a email/password into a key</p>",
        "id": 571476,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957676
    },
    {
        "content": "<p>ah, got it. (Don't know the answer, but hopefully someone who knows will be by soon :).)</p>",
        "id": 571477,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1524957733
    },
    {
        "content": "<p>not an answer, but if it helps you can get a users' API key manually by going to Settings from the gear menu.</p>",
        "id": 571478,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1524957795
    },
    {
        "content": "<p>right, yep I saw that</p>",
        "id": 571479,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957823
    },
    {
        "content": "<p>and we have </p>\n<div class=\"codehilite\"><pre><span></span>    # This json format view used by the mobile apps accepts a username\n    # password/pair and returns an API key.\n    url(r&#39;^api/v1/fetch_api_key$&#39;, zerver.views.auth.api_fetch_api_key,\n        name=&#39;zerver.views.auth.api_fetch_api_key&#39;),\n</pre></div>\n\n\n<p>in our <code>zproject/urls.py</code> file, which suggests at least a relevant endpoint is there.</p>",
        "id": 571480,
        "sender_full_name": "Rishi Gupta",
        "timestamp": 1524957866
    },
    {
        "content": "<p>yes, that's the type of thing I'd expect</p>",
        "id": 571481,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524957930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7589\">@Dave Gilbert</span> can you talk a bit about what you're trying to build?</p>",
        "id": 571484,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524959913
    },
    {
        "content": "<p>Regarding security, <a href=\"http://zulip.readthedocs.io/en/latest/production/security-model.html\" target=\"_blank\" title=\"http://zulip.readthedocs.io/en/latest/production/security-model.html\">http://zulip.readthedocs.io/en/latest/production/security-model.html</a> discusses it</p>",
        "id": 571485,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524959926
    },
    {
        "content": "<p>I should note that this server in particular is running Ubuntu Trusty (aka it's a legacy situation that will soon no longer exist in which there is no such security check beyond secret URLs).</p>",
        "id": 571486,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524959941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I've done some work on the Pidgin/Purple plugin for Matrix, and I was wondering about doing a zulip one, so thought I'd look at the API to understand it.  But also one of my criticisms of Matrix is the lack of security on images/content and wondered if Zulip was any better</p>",
        "id": 571491,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524960139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> OK, I'm not quite sure I understand where the translation to the temporary/expiring URL happens, but it does suggest at least you have something.  IMHO guarding with the apikey would be best, bonus points for securing them so that they're only available to members of the room where the image was posted</p>",
        "id": 571493,
        "sender_full_name": "Dave Gilbert",
        "timestamp": 1524961387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7589\">@Dave Gilbert</span> it's in different places for the S3 integration vs. the LOCAL_UPLOADS_DIR uploads integration, but both implementations are in functions with names starting with <code>server_</code> in <code>zerver/lib/upload.py</code></p>",
        "id": 571513,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1524980956
    }
]