[
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"tabbott@zulipchat.com\" data-user-id=\"7\">@Tim Abbott</span> are the PyCon Sprints a good place to discuss high-level improvements to CSS?<br>\nSince I am not working on the web thing, nor on the CSS, but consider myself to have rather extensive experience (and extensive opinions :) ) on that, I'd like to give you and whoever will benefit ideas on what changes are needed to make the css structure more modern, more resilient and flexible.</p>",
        "id": 193079,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493190863
    },
    {
        "content": "<p>Yeah, I think so!  What sort of changes do you have in mind?  I put on the list of ideas migrating to use a CSS preprocessor, but there's other directions in which the CSS could definitely be improved :)</p>",
        "id": 193080,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493190939
    },
    {
        "content": "<p>Some are minor, some are major.<br>\nMinor:</p>\n<ul>\n<li>no magic numbers, no margin: -2px, left: +13px etc. It is never flexible, and is only incidentally correct</li>\n<li>no need for long font-family alternatives. No font-family: 'Helvetica', 'Ariel', 'Tahoma'. Just one that is a webfont that is included and a 'serif'.</li>\n</ul>\n<p>More major:</p>\n<ul>\n<li>very few font sizes, only predetermined in SASS constants. For example NORMAL would be 14px LARGE will be NORMAL * MULTIPLIER, X_LARGE will be NORMAL * MULTIPLIER * MULTIPLIER</li>\n<li>any padding and margins in <code>em</code> and <code>rem</code>. That not only makes it more consistent but also makes it flexible and can grow the whole UI by just changing one value - the base font. For example <code>margin: 0.5em</code> is usually by intent. <code>margin: 3px</code> is often random, and then you might see 'margin: 5px' etc. Not only it takes more mental effort to determine these numbers, but also looks less consistent.</li>\n</ul>",
        "id": 193086,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191353
    },
    {
        "content": "<p>And many more like these</p>",
        "id": 193087,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191360
    },
    {
        "content": "<p>Also running cssstats like this:<br>\n<a href=\"http://cssstats.com/stats?url=http%3A%2F%2Fchat.zulip.org&amp;ua=Browser%20Default\" target=\"_blank\" title=\"http://cssstats.com/stats?url=http%3A%2F%2Fchat.zulip.org&amp;ua=Browser%20Default\">http://cssstats.com/stats?url=http%3A%2F%2Fchat.zulip.org&amp;ua=Browser%20Default</a><br>\nand optimizing.</p>\n<div class=\"message_embed\"><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://cssstats.com/stats?url=http%3A%2F%2Fchat.zulip.org&amp;ua=Browser%20Default\" target=\"_blank\" title=\"CSS Stats\">CSS Stats</a></div><div class=\"message_embed_description\">Rules</div></div></div>",
        "id": 193088,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191406
    },
    {
        "content": "<p>44 Unique Font Sizes =&gt; this should shrink to about 7-8<br>\n10 Unique Font Families =&gt; should be 2-3<br>\nSpecificity Graph =&gt; should be filled with low-value items<br>\n12 Media Queries =&gt; should be 3-4<br>\nSpacing Resets =&gt; should be way less<br>\nAlso total CSS can probably be something like 20-30kb instead of 263kb</p>",
        "id": 193090,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191552
    },
    {
        "content": "<p>Well, total CSS size is mostly KaTeX (aka <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop op-symbol small-op\" style=\"top:-0.0000050000000000050004em;\">∑</span></span></span></span> support), so that's not going to shrink</p>",
        "id": 193092,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493191600
    },
    {
        "content": "<p>But certainly the total CSS that's ours and we modify over time and thus isn't cachable across deploys would be great to shrink.</p>",
        "id": 193093,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493191635
    },
    {
        "content": "<p>Yeah, so the way I'd think about that project is to start with adding SASS to the toolchain; might be good to set that up before PyCon, and then try to use PyCon to clean things up.  My focus would be to start with compartmentalizing all the CSS that only affects 1 component, so that it's easier to know what you're changing, and then start optimizing the CSS for individual components to have nice properties (as well as adding constants for things like colors, etc.).</p>",
        "id": 193094,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493191704
    },
    {
        "content": "<p>In my opinion, SASS is almost not needed anymore. Almost all of these can be implemented in pure css.<br>\nOnly thing that is very useful is CSS variables that are almost universally available right now:<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a><br>\nIf they can be effectively pollyfilled for IE, then maybe SASS can be skipped</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\" style=\"background-image: url(https://developer.cdn.mozilla.net/static/img/opengraph-logo.dc4e08e2f6af.png)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" title=\"Using CSS variables\">Using CSS variables</a></div><div class=\"message_embed_description\">CSS Variables are entities defined by CSS authors which contain specific values to be reused throughout a document. They are set using custom property notation (e.g. --main-color: black;) and are accessed using the var() function (e.g. color: var(--main-color) ;) .</div></div></div>",
        "id": 193095,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191806
    },
    {
        "content": "<p><a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" title=\"http://caniuse.com/#feat=css-variables\">http://caniuse.com/#feat=css-variables</a></p>\n<div class=\"message_embed\"><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" title=\"Can I use... Support tables for HTML5, CSS3, etc\">Can I use... Support tables for HTML5, CSS3, etc</a></div></div></div>",
        "id": 193096,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493191825
    },
    {
        "content": "<p>Sure, but even if we use that, we should do the prep work so that whatever strategy we're using is setup before PyCon, so we make the best use of actually using things</p>",
        "id": 193098,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493192428
    },
    {
        "content": "<p>But I think a major feature I want from something like SASS is nesting, since that makes it much easier to properly scope CSS for components.</p>",
        "id": 193099,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1493192696
    },
    {
        "content": "<p>Nesting has much more negatives than positives.<br>\nOne big negative is that searching for a selector becomes impossible since it will not be in the <code>.stream-list .stream-item li</code> format.<br>\nAlso BEM methodologies for scoping are more effective.</p>",
        "id": 193100,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493192853
    },
    {
        "content": "<p>Component-scoped styling is still not perfectly solved issue, but the best attempts are something like React + CSS Modules or other CSS-as-JS approaches. Not perfect though.</p>",
        "id": 193101,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493192899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"alicja.raszkowska@gmail.com\" data-user-id=\"431\">@Alicja Raszkowska</span> sent out a really good article about a month ago on how to create modularized CSS with ordinary CSS.  I basically agree with <span class=\"user-mention\" data-user-email=\"borisyankov@gmail.com\" data-user-id=\"284\">@Boris Yankov</span> that SASS is mostly unnecessary and possibly mildly harmful.</p>",
        "id": 193125,
        "sender_full_name": "Steve Howell",
        "timestamp": 1493215303
    },
    {
        "content": "<p>You have not felt pain until you try to debug an overly engineered grid framework written in SASS that breaks the compiler itself ;)</p>",
        "id": 193132,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493218209
    },
    {
        "content": "<p>For certain properties of the CSS, such as \"this margin should not exceed the sum of the margins in these two other selectors\" (contrived example), we could write lint rules to enforce them, rather than going to a preprocessor.  I'm just throwing this out there as an option, though, because I think generally there are ways to do things correctly in modern CSS without introducing other moving parts.  But the nice thing about a linter-based approach is that you don't have to worry about runtime support.</p>",
        "id": 193139,
        "sender_full_name": "Steve Howell",
        "timestamp": 1493219209
    },
    {
        "content": "<p>I think with the cons of nesting there's still way more pros involved. If we stick with standard CSS then it'd be nice to create a form of nesting in which we require three levels of declarations to specify a selector (if more than 3 levels deep), like <code>.compose form .email</code>, which makes it easily searchable and harder to accidentally affect other styles in the site. I don't think searching for values is actually super hard with nested CSS however since with a bit of logic you can usually find a unique element in the nesting sequence and then from there search for the less unique elements.</p>\n<p>And polyfilling variables isn't <em>really</em> a thing. You'll be adding some build component to our system, in which case we should probably just use a system that is widely understood like SCSS/Sass and then not have to worry about any browser compat. We could also then use mixins for maximum compatibility without multiple declarations for things like filters and transforms.</p>",
        "id": 193288,
        "sender_full_name": "Brock Whittaker",
        "timestamp": 1493233532
    },
    {
        "content": "<p>... and then there is CSS Next <br>\n<a href=\"http://cssnext.io/\" target=\"_blank\" title=\"http://cssnext.io/\">http://cssnext.io/</a></p>",
        "id": 193311,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493234625
    },
    {
        "content": "<p>Which is to CSS what is Babel to JS</p>",
        "id": 193312,
        "sender_full_name": "Boris Yankov",
        "timestamp": 1493234635
    }
]