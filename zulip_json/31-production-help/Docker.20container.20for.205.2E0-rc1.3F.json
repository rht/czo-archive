[
    {
        "content": "<p>Quick question: will there be a Docker container for 5.0-rc1? <a href=\"https://hub.docker.com/r/zulip/docker-zulip/tags\">https://hub.docker.com/r/zulip/docker-zulip/tags</a> does not have a tag for 5.0-rc1 yet.</p>",
        "id": 1346006,
        "sender_full_name": "Felix Fontein",
        "timestamp": 1647415878
    },
    {
        "content": "<p>I would like this too! Of course we can build it ourselves, but having the release candidate published lowers the bar for us to test it. It also lowers the bar to test any second or third release candidate <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 1346050,
        "sender_full_name": "Maarten",
        "timestamp": 1647422132
    },
    {
        "content": "<p>We should build one -- though I do want to be a bit careful about possibly triggering folks running Docker automatically upgrading the 5.0-rc1.</p>",
        "id": 1346166,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647447924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> thoughts on how we should do the Docker build?  I guess maybe because <code>docker-zulip</code> generally pins a version, it might be OK?</p>",
        "id": 1346167,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647447959
    },
    {
        "content": "<p>Maybe it would be ok if <code>latest</code> isn't updated, only a new tag <code>5.0-rc1</code> is added? Assuming that is not too complicated to implement.</p>",
        "id": 1346173,
        "sender_full_name": "Felix Fontein",
        "timestamp": 1647448809
    },
    {
        "content": "<p>Yeah, I'm personally not sure how to avoid <code>latest</code> being updated; hopefully someone else does <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 1346239,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647452786
    },
    {
        "content": "<p><code>latest</code> is not magic, it's just another name.  So we can push a 5.0-rc1 without touching latest very easily.</p>",
        "id": 1346240,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647452853
    },
    {
        "content": "<p>Cool, do you have time to deal with that today? I don't have much time left in my workday.</p>",
        "id": 1346305,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647457031
    },
    {
        "content": "<p>Yup, will do.</p>",
        "id": 1346312,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647457140
    },
    {
        "content": "<p>Put me down for a Dockerized 5.0-rc1 as well!</p>",
        "id": 1346459,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647463622
    },
    {
        "content": "<p>I've just pushed <code>zulip/docker-zulip:5.0-rc1-0</code>.</p>",
        "id": 1346559,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647470120
    },
    {
        "content": "<p>Pulled successfully, but I have the same issue with doing a \"manual configuration\":</p>\n<p>zulip_1_758dc3f7b42d | /sbin/entrypoint.sh: line 331: SECRETS_postgres_password: parameter not set</p>\n<p>postgres_password is set in /opt/docker/zulip/zulip/settings/etc-zulip/zulip-secrets.conf</p>",
        "id": 1346629,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647481468
    },
    {
        "content": "<p>I've switched to 5.0-rc1 in our production setup and it works well (at least nothing off I noticed so far :) ).</p>",
        "id": 1346758,
        "sender_full_name": "Felix Fontein",
        "timestamp": 1647502742
    },
    {
        "content": "<p>So I restarted from scratch, got it up and running, however, the \"Create your organization\" link wants to add a subdomain for the URL for people to connect to - why?  Why can't it be just the server name?  This is just for an internal employee chat, we don't need multiple organizations...is there a configuration option to ignore that?</p>",
        "id": 1346901,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647536815
    },
    {
        "content": "<p>If you have never created a domain without a subdomain you should be able to just create one.<br>\nIf you already have one on the server name you can not have a second one</p>",
        "id": 1346904,
        "sender_full_name": "Felix (strifel)",
        "timestamp": 1647537191
    },
    {
        "content": "<p>Interesting, it somehow remembered the top level organization.  Even though I docker rm'd all the old images - but I didn't delete the persistent data.</p>",
        "id": 1346916,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647537994
    },
    {
        "content": "<p>Okay, I gave up trying to get manual configuration working.  Can someone tell me how to configure SOCIAL_AUTH_SAML_ENABLED_IDPS in the docker-compose file?   In particular, I need to set the entity_id and url.  <br>\nI have this part from the readme, ZULIP_AUTH_BACKENDS: \"SAMLAuthBackend\", and Zulip comes up with \"Log in with SAML\".</p>",
        "id": 1347005,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647541914
    },
    {
        "content": "<p>I think almost got it...</p>\n<div class=\"codehilite\"><pre><span></span><code>  SETTING_SOCIAL_AUTH_SAML_SP_ENTITY_ID: &quot;https://zulip.mydomain&quot;\n  SETTING_SOCIAL_AUTH_SAML_SP_URL: &quot;https://auth.mydomain/auth/realms/sdm/&quot;\n  ZULIP_AUTH_BACKENDS: &quot;SAMLAuthBackend&quot;\n</code></pre></div>",
        "id": 1347063,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647544345
    },
    {
        "content": "<p>I'm not entirely sure that SAML configuration is possible with the Docker environment variable passing scheme; it's certainly a messy problem to encode the configuration dictionaries in a shell environment variables via the Docker configuration that can then be decoded and written to the configuration file, and I don't recall our having JSON encoding/decoding logic to deal with that. But maybe not actually hard, just messy...</p>",
        "id": 1347099,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647546983
    },
    {
        "content": "<p>For SAML configuration, you have to use the environment variable <code>ZULIP_CUSTOM_SETTINGS</code>. It would look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>services:\n  zulip:\n    environment:\n      SETTING_EXTERNAL_HOST=chat.example.com\n      ZULIP_CUSTOM_SETTINGS: |\n        SOCIAL_AUTH_SAML_ORG_INFO = {\n            &quot;en-US&quot;: {\n                &quot;displayname&quot;: &quot;SSO Login&quot;,\n                &quot;name&quot;: &quot;Your Organization name&quot;,\n                &quot;url&quot;: &quot;https://chat.example.com&quot;,\n            }\n        }\n</code></pre></div>\n<p>There is one catch though. This env variable will be processed BEFORE your other environment configuration. That means, that for example the default value <code>\"url\": \"{}{}\".format(\"https://\", EXTERNAL_HOST),</code> does not work (<code>EXTERNAL_HOST</code> which you set via <code>SETTING_EXTERNAL_HOST</code> is inserted after the config block from <code>ZULIP_CUSTOM_SETTINGS</code>). You have to insert the correct URL there.</p>",
        "id": 1347637,
        "sender_full_name": "Lumrenion",
        "timestamp": 1647591273
    },
    {
        "content": "<p>TY for help - decided to go with openID instead of SAML.</p>",
        "id": 1348072,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647638415
    },
    {
        "content": "<p>I'm currently running a version from <code>main</code>, but I'm also running my own fork of the entrypoint script, because I need to set OAUTH variables with env variables. I made a small PR: </p>\n<p><a href=\"https://github.com/zulip/docker-zulip/pull/347\">https://github.com/zulip/docker-zulip/pull/347</a></p>\n<p>If this could get merged, I could also test the 5.0 release candidate docker version (together with the helm chart, btw <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 1348895,
        "sender_full_name": "Maarten",
        "timestamp": 1647864663
    },
    {
        "content": "<p>I have the 5.0.rc1 running, using manual configuration for settings.py, when I try to login I get:</p>\n<div class=\"codehilite\"><pre><span></span><code> 237, in request\n    raise AuthFailed(self, str(err))\nsocial_core.exceptions.AuthFailed: Authentication failed: HTTPSConnectionPool(host=&#39;auth.mydomain&#39;, port=443): Max retries exceeded with url: /auth/realms/mydomain/.well-known/openid-configuration (Caused by ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(&#39;Tunnel connection failed: 407 Request rejected by proxy&#39;)))\n</code></pre></div>\n<p>Trying to connect to Keycloak, I configured the client the same as how we configured the client for Xwiki.  </p>\n<p>oidc_url: <a href=\"https://auth.mydomain/auth/realms/mydomain\">https://auth.mydomain/auth/realms/mydomain</a></p>",
        "id": 1348956,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647876135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"21924\">@Maarten</span>: Merged!</p>",
        "id": 1348961,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647876321
    },
    {
        "content": "<p>As our Keycloak and Zulip are internal only, do I need to add the ip of our Keycloak server to Smokescreen somewhere?   <br>\n\"Optionally, you can also configure the Smokescreen ACL list. By default, Smokescreen denies access to all non-public IP addresses, including 127.0.0.1, but allows traffic to all public Internet hosts.\"  from <a href=\"https://zulip.readthedocs.io/en/latest/production/deployment.html#customizing-the-outgoing-http-proxy\">https://zulip.readthedocs.io/en/latest/production/deployment.html#customizing-the-outgoing-http-proxy</a></p>",
        "id": 1348978,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647878032
    },
    {
        "content": "<p>FYI, tried disabling the proxy via </p>\n<div class=\"codehilite\"><pre><span></span><code>root@5febdfeac649:/etc/zulip# cat zulip.conf\n[machine]\npuppet_classes = zulip::profile::docker\ndeploy_type = production\n\n[http_proxy]\nhost =\n</code></pre></div>\n<p>Same issue.</p>",
        "id": 1349038,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647883388
    },
    {
        "content": "<p>Did you run <code>zulip-puppet-apply</code> after doing that?</p>",
        "id": 1349041,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883565
    },
    {
        "content": "<p>Oh, this is docker.  Hm.</p>",
        "id": 1349042,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883575
    },
    {
        "content": "<p>But I'd be surprised if we were routing acl requests through smokescreen.</p>",
        "id": 1349043,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883615
    },
    {
        "content": "<p>You can check <code>/var/log/zulip/smokescreen.log</code> for failures</p>",
        "id": 1349045,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883662
    },
    {
        "content": "<p>It's definitely smokescreen, found the log:  /var/log/zulip/smokescreen.log</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;allow&quot;:false,&quot;content_length&quot;:180,&quot;decision_reason&quot;:&quot;The destination address (10.172.0.9) was denied by rule &#39;Deny: Private Range&#39;. destination address was denied by rule, see error&quot;,&quot;dns_lookup_time_ms&quot;:4,&quot;enforce_would_deny&quot;:true,&quot;id&quot;:&quot;c8sb25km4eqs05stjbj0&quot;,&quot;inbound_remote_addr&quot;:&quot;127.0.0.1:37398&quot;,&quot;level&quot;:&quot;warning&quot;,&quot;msg&quot;:&quot;CANONICAL-PROXY-DECISION&quot;,&quot;project&quot;:&quot;&quot;,&quot;proxy_type&quot;:&quot;connect&quot;,&quot;requested_host&quot;:&quot;auth.mydomain:443&quot;,&quot;role&quot;:&quot;&quot;,&quot;start_time&quot;:&quot;2022-03-21T17:08:38.030546281Z&quot;,&quot;time&quot;:&quot;2022-03-21T17:08:38Z&quot;,&quot;trace_id&quot;:&quot;&quot;}\n</code></pre></div>",
        "id": 1349046,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647883674
    },
    {
        "content": "<p>Hm!  Interesting.</p>",
        "id": 1349047,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883698
    },
    {
        "content": "<p>Just need to figure this part perhaps:  \"Optionally, you can also configure the Smokescreen ACL list.\"</p>",
        "id": 1349048,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647883751
    },
    {
        "content": "<p>That's also not well-defined right now, sadly.  <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>. <a href=\"https://github.com/zulip/zulip/pull/20490\">#20490</a></p>",
        "id": 1349049,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883782
    },
    {
        "content": "<p>The problem is that we're normally turn off the proxy by running zulip-puppet-apply, which writes out the settings from <code>/etc/zulip.conf</code> into the supervisor configuration files.</p>",
        "id": 1349051,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883846
    },
    {
        "content": "<p>We don't really have a clean way of doing that in Docker, though.</p>",
        "id": 1349054,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883871
    },
    {
        "content": "<p>A hacky workaround would be to open a shell in the container and run zulip-puppet-apply, but that will make your container not easy to re-create exactly.</p>",
        "id": 1349055,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883916
    },
    {
        "content": "<p>Same with editing the <code>/etc/supervisor/conf.d/zulip/</code> files to remove the proxy environment settings, which is what zulip-puppet-apply would do</p>",
        "id": 1349056,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647883954
    },
    {
        "content": "<p>Also be aware that running without smokescreen, or with <code>--unsafe-allow-private-ranges</code>, <em>will</em> open you up to SSRF.  The tradeoff of Zulip making requests for users is that it's better for end-user privacy, but means that it's in general more susceptible to confused-deputy problems.</p>",
        "id": 1349057,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647884084
    },
    {
        "content": "<p>I think the right general solution here is likely to be to extend the smokescreen config to allow only the ACL role to make requests to your Keycloak server.</p>\n<p>To build that, we'll need to:</p>\n<ul>\n<li>Build smokescreen to respect the role header that Zulip is sending</li>\n<li>Have some way (both in-docker and without-docker) of providing a smokescreen config file and/or ACL file</li>\n</ul>",
        "id": 1349058,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647884344
    },
    {
        "content": "<p>But the <em>fast</em> solution is adjusting the contents of your Docker container to rip out the proxy env vars, or pass <code>--unsafe-allow-private-ranges</code></p>",
        "id": 1349059,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647884378
    },
    {
        "content": "<p>Okay - that helped - adding --unsafe-allow-private-ranges</p>",
        "id": 1349061,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647884443
    },
    {
        "content": "<p>Actually, instead of <code>UnsafeAllowPrivateRanges</code>, you should try <code>--allow-address 10.172.0.9</code></p>",
        "id": 1349063,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647884491
    },
    {
        "content": "<p>Since AFAICT that does override the general, default, private IP range restriction.  And it's certainly safer than allowing all private IPs.</p>",
        "id": 1349065,
        "sender_full_name": "Alex Vandiver",
        "timestamp": 1647884523
    },
    {
        "content": "<p>So that works, now I am having trouble with our manual certificates...</p>\n<div class=\"codehilite\"><pre><span></span><code>social_core.exceptions.AuthFailed: Authentication failed: HTTPSConnectionPool(host=&#39;auth.mydomain&#39;, port=443): Max retries exceeded with url: /auth/realms/mydomain/.well-known/openid-configuration (Caused by SSLError(SSLCertVerificationError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1131)&#39;)))\n</code></pre></div>\n<p>What is really strange is, if I do a curl test inside the container, it seems happy:</p>\n<div class=\"codehilite\"><pre><span></span><code>root@0135b4414183:/var/log/zulip# curl -SsI https://zulip.mydomain\nHTTP/2 302\nserver: nginx/1.18.0 (Ubuntu)\ndate: Mon, 21 Mar 2022 19:07:53 GMT\ncontent-type: text/html; charset=utf-8\ncontent-length: 0\nlocation: /login/\nvary: Accept-Language, Cookie\ncontent-language: en\nstrict-transport-security: max-age=15768000\nx-frame-options: DENY\nx-content-type-options: nosniff\nx-xss-protection: 1; mode=block\n</code></pre></div>\n<p>But outside:</p>\n<div class=\"codehilite\"><pre><span></span><code>root@zulip:/srv/docker-zulip# curl -SsI https://zulip.mydomain\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\nMore details here: https://curl.haxx.se/docs/sslcerts.html\n\ncurl failed to verify the legitimacy of the server and therefore could not\nestablish a secure connection to it. To learn more about this situation and\nhow to fix it, please visit the web page mentioned above.\n</code></pre></div>\n<p>From a browser it looks fine:<br>\n<a href=\"/user_uploads/2/dd/vxodmt54inU7UGV5UR3hKISK/zulip-cert-01.png\">zulip-cert-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/dd/vxodmt54inU7UGV5UR3hKISK/zulip-cert-01.png\" title=\"zulip-cert-01.png\"><img src=\"/user_uploads/2/dd/vxodmt54inU7UGV5UR3hKISK/zulip-cert-01.png\"></a></div>",
        "id": 1349132,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647890074
    },
    {
        "content": "<p>Our guess is, during the zulip build, if you pass your custom CA then, it puts it in a python venv?<br>\nWhich isn't respecting the system trust store at all.  Hence why curl works but Zulip won't use it after the fact?</p>",
        "id": 1349366,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647901149
    },
    {
        "content": "<p>From:  <a href=\"https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections\">https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections</a></p>",
        "id": 1349367,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647901174
    },
    {
        "content": "<p>So, I rebuilt our image based on <a href=\"https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections\">https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections</a></p>\n<p>Added to Dockerfile (which includes our internal custom cert):<br>\nCOPY ./ca-certificates.crt /etc/ssl/certs/</p>",
        "id": 1349947,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647967144
    },
    {
        "content": "<p>Same issue:</p>\n<p>File \"/srv/zulip-venv-cache/56ac6adf406011a100282dd526d03537be84d23e/zulip-py3-venv/lib/python3.8/site-packages/social_core/backends/base.py\", line 237, in request<br>\n    raise AuthFailed(self, str(err))<br>\nsocial_core.exceptions.AuthFailed: Authentication failed: HTTPSConnectionPool(host='auth.mydomain', port=443): Max retries exceeded with url: /auth/realms/mydomain/.well-known/openid-configuration (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1131)')))</p>",
        "id": 1349948,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647967248
    },
    {
        "content": "<p>So, inside the container, if I do:</p>\n<div class=\"codehilite\"><pre><span></span><code>root@d684cd969aaf:/# python3\nPython 3.8.10 (default, Nov 26 2021, 20:14:08)\n[GCC 9.3.0] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import certifi\n&gt;&gt;&gt; certifi.where()\n&#39;/etc/ssl/certs/ca-certificates.crt&#39;\n</code></pre></div>",
        "id": 1349975,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647971174
    },
    {
        "content": "<p>That file has our internal cert.  However, there is another, in:</p>\n<p>/srv/zulip-venv-cache/56ac6adf406011a100282dd526d03537be84d23e/zulip-py3-venv/lib/python3.8/site-packages/stripe/data/ca-certificates.crt</p>",
        "id": 1349978,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647971241
    },
    {
        "content": "<p>That path looks like something only used by the <code>stripe</code> package, and thus likely not relevant.</p>",
        "id": 1349979,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1647971281
    },
    {
        "content": "<p>Okay...too bad...as that does NOT have our cert...</p>",
        "id": 1349982,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647971316
    },
    {
        "content": "<p>You’re not supposed to overwrite /etc/ssl/certs/ca-certificates.crt; that’s managed by the system. See <a href=\"https://ubuntu.com/server/docs/security-trust-store\">installing a root CA in the trust store</a>.</p>",
        "id": 1350174,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1647981817
    },
    {
        "content": "<p>Tried it that way as well, but <a href=\"https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections\">https://github.com/zulip/docker-zulip#using-a-custom-certificate-bundle-for-outgoing-http-connections</a> that says to build with a custom ca-certificates.crt.</p>",
        "id": 1350177,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647981958
    },
    {
        "content": "<p>For some reason, it looks like Zulip isn't using the system's trust store.  openssl and curl do, and we can connect to our keycloak server with a curl -v and see it is good with the cert.</p>",
        "id": 1350178,
        "sender_full_name": "Geoff Wild",
        "timestamp": 1647982117
    }
]