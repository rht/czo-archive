[
    {
        "content": "<p>Hi, I'm trying to access <a href=\"http://zulip.metameso.org/.well-known/acme-challenge/test\">http://zulip.metameso.org/.well-known/acme-challenge/test</a> but I get a 404.  Zulip is running and <code>include /etc/nginx/zulip-include/certbot</code> is included in the <code>sites-available</code> <code>zulip-enterprise</code> configuration:</p>\n<div class=\"codehilite\"><pre><span></span><code># Directory needed for certbot --webroot to work.\nlocation /.well-known/acme-challenge/ {\n    alias /var/lib/zulip/certbot-webroot/.well-known/acme-challenge/;\n}\n</code></pre></div>\n<p>Similarly,  <a href=\"http://zulip.metameso.org\">http://zulip.metameso.org</a> is also 404 Not Found, whereas  <a href=\"https://zulip.metameso.org\">https://zulip.metameso.org</a> warns of a potential security risk.</p>\n<p>Would you please help me figure out how to get past these obstacles and renew the site's certificate?</p>",
        "id": 1098570,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610631746
    },
    {
        "content": "<p>OK, I seem to have solved the problem now — I disabled other sites on the domain (<a href=\"http://metameso.org\">metameso.org</a>) and I can access the test file... so I think this should work now!</p>",
        "id": 1098574,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610632287
    },
    {
        "content": "<p>However, this does lead to the further question:</p>\n<ul>\n<li><strong>Is it possible to set up nginx so that the directory above is accessible <em>even when</em> the main domain is switched on and running?</strong></li>\n</ul>\n<p>Here's the Nginx configuration for the main domain:</p>\n<div class=\"codehilite\"><pre><span></span><code>server {\n\n        root /var/www/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name metameso.org www.metameso.org;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n\n        location ~ ^/~(.+?)(/.*)?$ {\n        alias /home/$1/public_html$2;\n        index index.html index.htm;\n        autoindex on;\n        }\n\n    listen [::]:443 ssl ipv6only=on; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/metameso.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/metameso.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n\n}\nserver {\n    if ($host = www.metameso.org) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n\n    if ($host = metameso.org) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        server_name metameso.org www.metameso.org;\n    return 404; # managed by Certbot\n\n}\n</code></pre></div>",
        "id": 1098578,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610632615
    },
    {
        "content": "<p>And here's the <code>/etc/nginx/sites-available/default</code></p>\n<div class=\"codehilite\"><pre><span></span><code>##\n# You should look at the following URL&#39;s in order to grasp a solid understanding\n# of Nginx configuration files in order to fully unleash the power of Nginx.\n# https://www.nginx.com/resources/wiki/start/\n# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/\n# https://wiki.debian.org/Nginx/DirectoryStructure\n#\n# In most cases, administrators will remove this file from sites-enabled/ and\n# leave it as reference inside of sites-available where it will continue to be\n# updated by the nginx packaging team.\n#\n# This file will automatically load configuration files provided by other\n# applications, such as Drupal or Wordpress. These applications will be made\n# available underneath a path with that package name, such as /drupal8.\n#\n# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.\n##\n\n# Default server configuration\n#\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    # SSL configuration\n    #\n    # listen 443 ssl default_server;\n    # listen [::]:443 ssl default_server;\n    #\n    # Note: You should disable gzip for SSL traffic.\n    # See: https://bugs.debian.org/773332\n    #\n    # Read up on ssl_ciphers to ensure a secure configuration.\n    # See: https://bugs.debian.org/765782\n    #\n    # Self signed certs generated by the ssl-cert package\n    # Don&#39;t use them in a production server!\n    #\n    # include snippets/snakeoil.conf;\n\n    root /var/www/html;\n\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name _;\n\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    }\n\n    # pass PHP scripts to FastCGI server\n    #\n    #location ~ \\.php$ {\n    #   include snippets/fastcgi-php.conf;\n    #\n    #   # With php-fpm (or other unix sockets):\n    #   fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n    #   # With php-cgi (or other tcp sockets):\n    #   fastcgi_pass 127.0.0.1:9000;\n    #}\n\n    # deny access to .htaccess files, if Apache&#39;s document root\n    # concurs with nginx&#39;s one\n    #\n    #location ~ /\\.ht {\n    #   deny all;\n    #}\n}\n</code></pre></div>",
        "id": 1098579,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610632670
    },
    {
        "content": "<p>The production install guide assumes that one is installing on a fresh server without anything else running. Maybe this requirement needs to be emphasized further.</p>",
        "id": 1098583,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610632815
    },
    {
        "content": "<p>I'm able to run it in the configuration above without problems, except for the certbot renewals! But, point taken, this isn't a standard setup.</p>",
        "id": 1098594,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610633382
    },
    {
        "content": "<p>Can you try a dry run of the cert renew to see that it still works for renew?</p>",
        "id": 1098597,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610633628
    },
    {
        "content": "<p><code>sudo certbot renew --dry-run</code></p>",
        "id": 1098599,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610633672
    },
    {
        "content": "<p>Yes, I can confirm that the dry run is successful (w/ the other domains turned off!)</p>",
        "id": 1098609,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610635189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"11098\">@Joe Corneli</span> that looks like you have to manually turn off the other domains, and so the cron script can't do automatically by itself?</p>",
        "id": 1099121,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610670829
    },
    {
        "content": "<p>Yep, that's the plan!</p>",
        "id": 1099122,
        "sender_full_name": "Joe Corneli",
        "timestamp": 1610671055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"11098\">@Joe Corneli</span> having to do things manually sounds painful, but looks like certbot supports wildcard subdomain ('*.domain.com'): <a href=\"https://certbot.eff.org/docs/using.html?highlight=wildcard\">https://certbot.eff.org/docs/using.html?highlight=wildcard</a>.</p>",
        "id": 1099124,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610671313
    },
    {
        "content": "<blockquote>\n<p>If you’d like to obtain a wildcard certificate from Let’s Encrypt or run certbot on a machine other than your target webserver, you can use one of Certbot’s DNS plugins.</p>\n</blockquote>",
        "id": 1099125,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610671342
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/39322112/multiple-subdomains-with-lets-encrypt\">https://stackoverflow.com/questions/39322112/multiple-subdomains-with-lets-encrypt</a></p>",
        "id": 1099126,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610671538
    },
    {
        "content": "<p>Yeah, we use <code>certbot</code>'s wildcard support.</p>",
        "id": 1100092,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1610837489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> the doc seems to be outdated: <a href=\"https://github.com/zulip/zulip/blob/08d716c74175a8b63bf8eb1080381c77f3f853c6/docs/production/ssl-certificates.md\">https://github.com/zulip/zulip/blob/08d716c74175a8b63bf8eb1080381c77f3f853c6/docs/production/ssl-certificates.md</a>.</p>\n<blockquote>\n<p>We recommend most Zulip servers use Certbot. You'll want something else if:<br>\nyou have an existing workflow for managing SSL certificates that you prefer;<br>\nyou need wildcard certificates (support from Let's Encrypt planned for early 2018); or<br>\nyour Zulip server is not on the public Internet. (In this case you can still use Certbot, but it's less convenient; and you'll want to ignore Zulip's automation.)</p>\n</blockquote>\n<p>The wildcard support has been released for a long time.</p>",
        "id": 1100202,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610872027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> <a href=\"https://github.com/zulip/zulip/pull/17072\">#17072</a></p>",
        "id": 1100204,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610873036
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 1100773,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1610974254
    },
    {
        "content": "<p>Actually, that sentence quoted says that \"you'll want something else\" if you need wildcard certificates. Since certbot already supports wildcard, it is possible to update the doc to recommend it.</p>",
        "id": 1100775,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610974654
    },
    {
        "content": "<p>Do we want to update <a href=\"https://github.com/zulip/zulip/blob/master/scripts/setup/setup-certbot\">https://github.com/zulip/zulip/blob/master/scripts/setup/setup-certbot</a> to support wildcard certs though?</p>",
        "id": 1100776,
        "sender_full_name": "Rein Zustand",
        "timestamp": 1610974764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"2328\">@Rein Zustand</span> I think so.  We'd need to be thoughtful about how to do it, though -- the certbot authentication methods for wildcard certs require making DNS records, and might be a harder flow to script around?  Worth testing.</p>",
        "id": 1101583,
        "sender_full_name": "Tim Abbott",
        "timestamp": 1611035368
    }
]